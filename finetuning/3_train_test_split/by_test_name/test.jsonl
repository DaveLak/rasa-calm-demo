{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need medical support.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need medical support.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_000.yml::can't advice on health 000","user_uttered":"I need medical support.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need medical support.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need medical support.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I require assistance with my health.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I require assistance with my health.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_001.yml::can't advice on health 001","user_uttered":"I require assistance with my health.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I require assistance with my health.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I require assistance with my health.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you help me with a health issue?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you help me with a health issue?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_002.yml::can't advice on health 002","user_uttered":"Can you help me with a health issue?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you help me with a health issue?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you help me with a health issue?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm in need of medical advice.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm in need of medical advice.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_003.yml::can't advice on health 003","user_uttered":"I'm in need of medical advice.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm in need of medical advice.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm in need of medical advice.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you provide some medical guidance?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you provide some medical guidance?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_004.yml::can't advice on health 004","user_uttered":"Could you provide some medical guidance?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you provide some medical guidance?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you provide some medical guidance?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm seeking medical help.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm seeking medical help.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_005.yml::can't advice on health 005","user_uttered":"I'm seeking medical help.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm seeking medical help.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm seeking medical help.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I could use some help with a health problem.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I could use some help with a health problem.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_006.yml::can't advice on health 006","user_uttered":"I could use some help with a health problem.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I could use some help with a health problem.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I could use some help with a health problem.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking for health-related advice.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking for health-related advice.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_007.yml::can't advice on health 007","user_uttered":"I'm looking for health-related advice.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking for health-related advice.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking for health-related advice.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you give me some advice on a medical issue?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you give me some advice on a medical issue?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_008.yml::can't advice on health 008","user_uttered":"Can you give me some advice on a medical issue?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you give me some advice on a medical issue?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you give me some advice on a medical issue?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need some guidance on a health matter.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need some guidance on a health matter.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_009.yml::can't advice on health 009","user_uttered":"I need some guidance on a health matter.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need some guidance on a health matter.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need some guidance on a health matter.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you assist me with a medical concern?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you assist me with a medical concern?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(health_advice)","test_name":"can't advice on health ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/can't_advice_on_health_010.yml::can't advice on health 010","user_uttered":"Could you assist me with a medical concern?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you assist me with a medical concern?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you assist me with a medical concern?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(health_advice)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to add someone to my contact list\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to add someone to my contact list\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_000.yml::user adds a contact to their list 000","user_uttered":"I want to add someone to my contact list","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to add someone to my contact list\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to add someone to my contact list\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add someone to my contact list\nAI: What's the handle of the user you want to add?\nUSER: it's @barts\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"it's @barts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_000.yml::user adds a contact to their list 000","user_uttered":"it's @barts","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add someone to my contact list\nAI: What's the handle of the user you want to add?\nUSER: it's @barts\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"it's @barts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add someone to my contact list\nAI: What's the handle of the user you want to add?\nUSER: it's @barts\nAI: What's the name of the user you want to add?\nUSER: just Bart\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"just Bart\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_000.yml::user adds a contact to their list 000","user_uttered":"just Bart","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add someone to my contact list\nAI: What's the handle of the user you want to add?\nUSER: it's @barts\nAI: What's the name of the user you want to add?\nUSER: just Bart\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"just Bart\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to include a new person in my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to include a new person in my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_001.yml::user adds a contact to their list 001","user_uttered":"I'd like to include a new person in my contact list.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to include a new person in my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to include a new person in my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to include a new person in my contact list.\nAI: What's the handle of the user you want to add?\nUSER: the handle is @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"the handle is @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_001.yml::user adds a contact to their list 001","user_uttered":"the handle is @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to include a new person in my contact list.\nAI: What's the handle of the user you want to add?\nUSER: the handle is @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"the handle is @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to include a new person in my contact list.\nAI: What's the handle of the user you want to add?\nUSER: the handle is @barts.\nAI: What's the name of the user you want to add?\nUSER: The name is Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The name is Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_001.yml::user adds a contact to their list 001","user_uttered":"The name is Bart.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to include a new person in my contact list.\nAI: What's the handle of the user you want to add?\nUSER: the handle is @barts.\nAI: What's the name of the user you want to add?\nUSER: The name is Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The name is Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to expand my contact list with a new addition.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to expand my contact list with a new addition.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_002.yml::user adds a contact to their list 002","user_uttered":"I'm looking to expand my contact list with a new addition.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to expand my contact list with a new addition.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to expand my contact list with a new addition.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to expand my contact list with a new addition.\nAI: What's the handle of the user you want to add?\nUSER: You can find them at @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"You can find them at @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_002.yml::user adds a contact to their list 002","user_uttered":"You can find them at @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to expand my contact list with a new addition.\nAI: What's the handle of the user you want to add?\nUSER: You can find them at @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"You can find them at @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to expand my contact list with a new addition.\nAI: What's the handle of the user you want to add?\nUSER: You can find them at @barts.\nAI: What's the name of the user you want to add?\nUSER: He's simply known as Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He's simply known as Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_002.yml::user adds a contact to their list 002","user_uttered":"He's simply known as Bart.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to expand my contact list with a new addition.\nAI: What's the handle of the user you want to add?\nUSER: You can find them at @barts.\nAI: What's the name of the user you want to add?\nUSER: He's simply known as Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He's simply known as Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to put someone new on my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to put someone new on my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_003.yml::user adds a contact to their list 003","user_uttered":"I need to put someone new on my contact list.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to put someone new on my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to put someone new on my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to put someone new on my contact list.\nAI: What's the handle of the user you want to add?\nUSER: Their handle is @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Their handle is @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_003.yml::user adds a contact to their list 003","user_uttered":"Their handle is @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to put someone new on my contact list.\nAI: What's the handle of the user you want to add?\nUSER: Their handle is @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Their handle is @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to put someone new on my contact list.\nAI: What's the handle of the user you want to add?\nUSER: Their handle is @barts.\nAI: What's the name of the user you want to add?\nUSER: You can just call him Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"You can just call him Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_003.yml::user adds a contact to their list 003","user_uttered":"You can just call him Bart.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to put someone new on my contact list.\nAI: What's the handle of the user you want to add?\nUSER: Their handle is @barts.\nAI: What's the name of the user you want to add?\nUSER: You can just call him Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"You can just call him Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm aiming to append a new contact to my list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm aiming to append a new contact to my list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_004.yml::user adds a contact to their list 004","user_uttered":"I'm aiming to append a new contact to my list.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm aiming to append a new contact to my list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm aiming to append a new contact to my list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm aiming to append a new contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: Look up @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Look up @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_004.yml::user adds a contact to their list 004","user_uttered":"Look up @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm aiming to append a new contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: Look up @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Look up @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm aiming to append a new contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: Look up @barts.\nAI: What's the name of the user you want to add?\nUSER: He goes by the name Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He goes by the name Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_004.yml::user adds a contact to their list 004","user_uttered":"He goes by the name Bart.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm aiming to append a new contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: Look up @barts.\nAI: What's the name of the user you want to add?\nUSER: He goes by the name Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He goes by the name Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to incorporate a new individual into my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to incorporate a new individual into my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_005.yml::user adds a contact to their list 005","user_uttered":"I wish to incorporate a new individual into my contact list.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to incorporate a new individual into my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to incorporate a new individual into my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to incorporate a new individual into my contact list.\nAI: What's the handle of the user you want to add?\nUSER: They're listed as @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"They're listed as @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_005.yml::user adds a contact to their list 005","user_uttered":"They're listed as @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to incorporate a new individual into my contact list.\nAI: What's the handle of the user you want to add?\nUSER: They're listed as @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"They're listed as @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to incorporate a new individual into my contact list.\nAI: What's the handle of the user you want to add?\nUSER: They're listed as @barts.\nAI: What's the name of the user you want to add?\nUSER: His name is just Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"His name is just Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_005.yml::user adds a contact to their list 005","user_uttered":"His name is just Bart.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to incorporate a new individual into my contact list.\nAI: What's the handle of the user you want to add?\nUSER: They're listed as @barts.\nAI: What's the name of the user you want to add?\nUSER: His name is just Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"His name is just Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have a new contact I want to add to my list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have a new contact I want to add to my list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_006.yml::user adds a contact to their list 006","user_uttered":"I have a new contact I want to add to my list.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have a new contact I want to add to my list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have a new contact I want to add to my list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have a new contact I want to add to my list.\nAI: What's the handle of the user you want to add?\nUSER: You'll find them under @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"You'll find them under @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_006.yml::user adds a contact to their list 006","user_uttered":"You'll find them under @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have a new contact I want to add to my list.\nAI: What's the handle of the user you want to add?\nUSER: You'll find them under @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"You'll find them under @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have a new contact I want to add to my list.\nAI: What's the handle of the user you want to add?\nUSER: You'll find them under @barts.\nAI: What's the name of the user you want to add?\nUSER: Bart is his name.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Bart is his name.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_006.yml::user adds a contact to their list 006","user_uttered":"Bart is his name.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have a new contact I want to add to my list.\nAI: What's the handle of the user you want to add?\nUSER: You'll find them under @barts.\nAI: What's the name of the user you want to add?\nUSER: Bart is his name.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Bart is his name.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I desire to add a fresh contact to my list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I desire to add a fresh contact to my list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_007.yml::user adds a contact to their list 007","user_uttered":"I desire to add a fresh contact to my list.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I desire to add a fresh contact to my list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I desire to add a fresh contact to my list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I desire to add a fresh contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: They go by @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"They go by @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_007.yml::user adds a contact to their list 007","user_uttered":"They go by @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I desire to add a fresh contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: They go by @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"They go by @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I desire to add a fresh contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: They go by @barts.\nAI: What's the name of the user you want to add?\nUSER: He's known as Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He's known as Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_007.yml::user adds a contact to their list 007","user_uttered":"He's known as Bart.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I desire to add a fresh contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: They go by @barts.\nAI: What's the name of the user you want to add?\nUSER: He's known as Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He's known as Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in adding a new person to my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in adding a new person to my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_008.yml::user adds a contact to their list 008","user_uttered":"I'm interested in adding a new person to my contact list.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in adding a new person to my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in adding a new person to my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in adding a new person to my contact list.\nAI: What's the handle of the user you want to add?\nUSER: Their username is @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Their username is @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_008.yml::user adds a contact to their list 008","user_uttered":"Their username is @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in adding a new person to my contact list.\nAI: What's the handle of the user you want to add?\nUSER: Their username is @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Their username is @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in adding a new person to my contact list.\nAI: What's the handle of the user you want to add?\nUSER: Their username is @barts.\nAI: What's the name of the user you want to add?\nUSER: He prefers to be called Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He prefers to be called Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_008.yml::user adds a contact to their list 008","user_uttered":"He prefers to be called Bart.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in adding a new person to my contact list.\nAI: What's the handle of the user you want to add?\nUSER: Their username is @barts.\nAI: What's the name of the user you want to add?\nUSER: He prefers to be called Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He prefers to be called Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm planning to add a new name to my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm planning to add a new name to my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_009.yml::user adds a contact to their list 009","user_uttered":"I'm planning to add a new name to my contact list.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm planning to add a new name to my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm planning to add a new name to my contact list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm planning to add a new name to my contact list.\nAI: What's the handle of the user you want to add?\nUSER: They use the handle @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"They use the handle @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_009.yml::user adds a contact to their list 009","user_uttered":"They use the handle @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm planning to add a new name to my contact list.\nAI: What's the handle of the user you want to add?\nUSER: They use the handle @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"They use the handle @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm planning to add a new name to my contact list.\nAI: What's the handle of the user you want to add?\nUSER: They use the handle @barts.\nAI: What's the name of the user you want to add?\nUSER: His preferred name is Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"His preferred name is Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_009.yml::user adds a contact to their list 009","user_uttered":"His preferred name is Bart.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm planning to add a new name to my contact list.\nAI: What's the handle of the user you want to add?\nUSER: They use the handle @barts.\nAI: What's the name of the user you want to add?\nUSER: His preferred name is Bart.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"His preferred name is Bart.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I intend to add a new contact to my list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I intend to add a new contact to my list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(add_contact)","test_name":"user adds a contact to their list ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_010.yml::user adds a contact to their list 010","user_uttered":"I intend to add a new contact to my list.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I intend to add a new contact to my list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I intend to add a new contact to my list.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(add_contact)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to add a new contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: They're registered as @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"They're registered as @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_handle, @barts)","test_name":"user adds a contact to their list ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_010.yml::user adds a contact to their list 010","user_uttered":"They're registered as @barts.","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to add a new contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: They're registered as @barts.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"They're registered as @barts.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_handle, @barts)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to add a new contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: They're registered as @barts.\nAI: What's the name of the user you want to add?\nUSER: He identifies as Bart.'\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He identifies as Bart.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(add_contact_name, Bart)","test_name":"user adds a contact to their list ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_adds_a_contact_to_their_list_010.yml::user adds a contact to their list 010","user_uttered":"He identifies as Bart.'","current_flow":"add_contact","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to add a new contact to my list.\nAI: What's the handle of the user you want to add?\nUSER: They're registered as @barts.\nAI: What's the name of the user you want to add?\nUSER: He identifies as Bart.'\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"He identifies as Bart.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(add_contact_name, Bart)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please start ten transfers to Jim\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please start ten transfers to Jim\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jim)","test_name":"user asks to start 10 transfers ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_asks_to_start_10_transfers_000.yml::user asks to start 10 transfers 000","user_uttered":"Please start ten transfers to Jim","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please start ten transfers to Jim\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please start ten transfers to Jim\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jim)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please start ten transfers to Jim\nAI: How much money do you want to transfer?\nUSER: 10\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Jim, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"10\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_amount_of_money, 10)","test_name":"user asks to start 10 transfers ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_asks_to_start_10_transfers_000.yml::user asks to start 10 transfers 000","user_uttered":"10","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please start ten transfers to Jim\nAI: How much money do you want to transfer?\nUSER: 10\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Jim, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"10\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please start ten transfers to Jim\nAI: How much money do you want to transfer?\nUSER: 10\nAI: Would you like to transfer 10 to Jim?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Jim, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user asks to start 10 transfers ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_asks_to_start_10_transfers_000.yml::user asks to start 10 transfers 000","user_uttered":"yes","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please start ten transfers to Jim\nAI: How much money do you want to transfer?\nUSER: 10\nAI: Would you like to transfer 10 to Jim?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Jim, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please start ten transfers to Jim\nAI: How much money do you want to transfer?\nUSER: 10\nAI: Would you like to transfer 10 to Jim?\nUSER: yes\nAI: Successfully transferred 10 to Jim.\nAI: Is there anything else you need assistance with?\nUSER: show my transactions please\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)","test_name":"user asks to start 10 transfers ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_asks_to_start_10_transfers_000.yml::user asks to start 10 transfers 000","user_uttered":"show my transactions please","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please start ten transfers to Jim\nAI: How much money do you want to transfer?\nUSER: 10\nAI: Would you like to transfer 10 to Jim?\nUSER: yes\nAI: Successfully transferred 10 to Jim.\nAI: Is there anything else you need assistance with?\nUSER: show my transactions please\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like you to start ten transfers to Jim.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like you to start ten transfers to Jim.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jim)","test_name":"user asks to start 10 transfers ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_asks_to_start_10_transfers_001.yml::user asks to start 10 transfers 001","user_uttered":"I'd like you to start ten transfers to Jim.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like you to start ten transfers to Jim.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like you to start ten transfers to Jim.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jim)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like you to start ten transfers to Jim.\nAI: How much money do you want to transfer?\nUSER: It's 10.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Jim, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's 10.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_amount_of_money, 10)","test_name":"user asks to start 10 transfers ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_asks_to_start_10_transfers_001.yml::user asks to start 10 transfers 001","user_uttered":"It's 10.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like you to start ten transfers to Jim.\nAI: How much money do you want to transfer?\nUSER: It's 10.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Jim, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's 10.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like you to start ten transfers to Jim.\nAI: How much money do you want to transfer?\nUSER: It's 10.\nAI: Would you like to transfer 10 to Jim?\nUSER: Sure.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Jim, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user asks to start 10 transfers ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_asks_to_start_10_transfers_001.yml::user asks to start 10 transfers 001","user_uttered":"Sure.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like you to start ten transfers to Jim.\nAI: How much money do you want to transfer?\nUSER: It's 10.\nAI: Would you like to transfer 10 to Jim?\nUSER: Sure.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Jim, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like you to start ten transfers to Jim.\nAI: How much money do you want to transfer?\nUSER: It's 10.\nAI: Would you like to transfer 10 to Jim?\nUSER: Sure.\nAI: Successfully transferred 10 to Jim.\nAI: Is there anything else I can assist you with?\nUSER: I'd like to see my transactions.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to see my transactions.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)","test_name":"user asks to start 10 transfers ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_asks_to_start_10_transfers_001.yml::user asks to start 10 transfers 001","user_uttered":"I'd like to see my transactions.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like you to start ten transfers to Jim.\nAI: How much money do you want to transfer?\nUSER: It's 10.\nAI: Would you like to transfer 10 to Jim?\nUSER: Sure.\nAI: Successfully transferred 10 to Jim.\nAI: Is there anything else I can assist you with?\nUSER: I'd like to see my transactions.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to see my transactions.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to book a table for 4 at Xaigon for 8pm tonight\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to book a table for 4 at Xaigon for 8pm tonight\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_000.yml::user books a restaurant 000","user_uttered":"I want to book a table for 4 at Xaigon for 8pm tonight","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to book a table for 4 at Xaigon for 8pm tonight\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to book a table for 4 at Xaigon for 8pm tonight\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 8pm tonight\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Emil\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Emil\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_000.yml::user books a restaurant 000","user_uttered":"Emil","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 8pm tonight\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Emil\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Emil\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 8pm tonight\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Emil\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: yes\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_000.yml::user books a restaurant 000","user_uttered":"yes","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 8pm tonight\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Emil\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: yes\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I reserve a table for four at Xaigon for 8pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I reserve a table for four at Xaigon for 8pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_001.yml::user books a restaurant 001","user_uttered":"Can I reserve a table for four at Xaigon for 8pm tonight?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I reserve a table for four at Xaigon for 8pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I reserve a table for four at Xaigon for 8pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I reserve a table for four at Xaigon for 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Put the reservation under the name Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Put the reservation under the name Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_001.yml::user books a restaurant 001","user_uttered":"Put the reservation under the name Emil.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I reserve a table for four at Xaigon for 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Put the reservation under the name Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Put the reservation under the name Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I reserve a table for four at Xaigon for 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Put the reservation under the name Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_001.yml::user books a restaurant 001","user_uttered":"Absolutely.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I reserve a table for four at Xaigon for 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Put the reservation under the name Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I get a table for four at Xaigon at 8pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I get a table for four at Xaigon at 8pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_002.yml::user books a restaurant 002","user_uttered":"Could I get a table for four at Xaigon at 8pm tonight?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I get a table for four at Xaigon at 8pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I get a table for four at Xaigon at 8pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I get a table for four at Xaigon at 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please use Emil for the reservation.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please use Emil for the reservation.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_002.yml::user books a restaurant 002","user_uttered":"Please use Emil for the reservation.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I get a table for four at Xaigon at 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please use Emil for the reservation.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please use Emil for the reservation.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I get a table for four at Xaigon at 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please use Emil for the reservation.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_002.yml::user books a restaurant 002","user_uttered":"Of course.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I get a table for four at Xaigon at 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please use Emil for the reservation.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need a table for four at Xaigon, tonight at 8pm.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need a table for four at Xaigon, tonight at 8pm.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_003.yml::user books a restaurant 003","user_uttered":"I need a table for four at Xaigon, tonight at 8pm.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need a table for four at Xaigon, tonight at 8pm.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need a table for four at Xaigon, tonight at 8pm.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need a table for four at Xaigon, tonight at 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: I'd like the reservation to be in the name of Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like the reservation to be in the name of Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_003.yml::user books a restaurant 003","user_uttered":"I'd like the reservation to be in the name of Emil.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need a table for four at Xaigon, tonight at 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: I'd like the reservation to be in the name of Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like the reservation to be in the name of Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need a table for four at Xaigon, tonight at 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: I'd like the reservation to be in the name of Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Yes, please.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, please.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_003.yml::user books a restaurant 003","user_uttered":"Yes, please.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need a table for four at Xaigon, tonight at 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: I'd like the reservation to be in the name of Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Yes, please.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, please.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you book a table for four at Xaigon for 8pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you book a table for four at Xaigon for 8pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_004.yml::user books a restaurant 004","user_uttered":"Can you book a table for four at Xaigon for 8pm tonight?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you book a table for four at Xaigon for 8pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you book a table for four at Xaigon for 8pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you book a table for four at Xaigon for 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Use Emil for the reservation, please.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Use Emil for the reservation, please.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_004.yml::user books a restaurant 004","user_uttered":"Use Emil for the reservation, please.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you book a table for four at Xaigon for 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Use Emil for the reservation, please.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Use Emil for the reservation, please.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you book a table for four at Xaigon for 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Use Emil for the reservation, please.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Yes, that's correct.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, that's correct.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_004.yml::user books a restaurant 004","user_uttered":"Yes, that's correct.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you book a table for four at Xaigon for 8pm tonight?\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Use Emil for the reservation, please.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Yes, that's correct.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, that's correct.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to secure a table for four at Xaigon for 8pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to secure a table for four at Xaigon for 8pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_005.yml::user books a restaurant 005","user_uttered":"I'd like to secure a table for four at Xaigon for 8pm tonight.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to secure a table for four at Xaigon for 8pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to secure a table for four at Xaigon for 8pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to secure a table for four at Xaigon for 8pm tonight.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Can you put the reservation under Emil?\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you put the reservation under Emil?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_005.yml::user books a restaurant 005","user_uttered":"Can you put the reservation under Emil?","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to secure a table for four at Xaigon for 8pm tonight.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Can you put the reservation under Emil?\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you put the reservation under Emil?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to secure a table for four at Xaigon for 8pm tonight.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Can you put the reservation under Emil?\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Yes, confirm it.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, confirm it.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_005.yml::user books a restaurant 005","user_uttered":"Yes, confirm it.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to secure a table for four at Xaigon for 8pm tonight.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Can you put the reservation under Emil?\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Yes, confirm it.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, confirm it.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to reserve a table for four at Xaigon for 8pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to reserve a table for four at Xaigon for 8pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_006.yml::user books a restaurant 006","user_uttered":"I wish to reserve a table for four at Xaigon for 8pm tonight.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to reserve a table for four at Xaigon for 8pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to reserve a table for four at Xaigon for 8pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to reserve a table for four at Xaigon for 8pm tonight.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please make the reservation under Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please make the reservation under Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_006.yml::user books a restaurant 006","user_uttered":"Please make the reservation under Emil.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to reserve a table for four at Xaigon for 8pm tonight.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please make the reservation under Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please make the reservation under Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to reserve a table for four at Xaigon for 8pm tonight.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please make the reservation under Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Yes, that's right.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, that's right.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_006.yml::user books a restaurant 006","user_uttered":"Yes, that's right.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to reserve a table for four at Xaigon for 8pm tonight.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please make the reservation under Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Yes, that's right.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, that's right.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to book a table for 4 at Xaigon for 7pm tonight\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_000.yml::user books a restaurant with an alternative time 000","user_uttered":"I want to book a table for 4 at Xaigon for 7pm tonight","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to book a table for 4 at Xaigon for 7pm tonight\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: sounds good!\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sounds good!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_000.yml::user books a restaurant with an alternative time 000","user_uttered":"sounds good!","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: sounds good!\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sounds good!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: sounds good!\nAI: Would you like to change the reservation time for the restaurant?\nUSER: yes\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(confirm_slot_correction, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_000.yml::user books a restaurant with an alternative time 000","user_uttered":"yes","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: sounds good!\nAI: Would you like to change the reservation time for the restaurant?\nUSER: yes\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(confirm_slot_correction, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: sounds good!\nAI: Would you like to change the reservation time for the restaurant?\nUSER: yes\nAI: Sure thing! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Emil\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Emil\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_000.yml::user books a restaurant with an alternative time 000","user_uttered":"Emil","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: sounds good!\nAI: Would you like to change the reservation time for the restaurant?\nUSER: yes\nAI: Sure thing! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Emil\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Emil\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: sounds good!\nAI: Would you like to change the reservation time for the restaurant?\nUSER: yes\nAI: Sure thing! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Emil\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: yes\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_000.yml::user books a restaurant with an alternative time 000","user_uttered":"yes","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to book a table for 4 at Xaigon for 7pm tonight\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: sounds good!\nAI: Would you like to change the reservation time for the restaurant?\nUSER: yes\nAI: Sure thing! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Emil\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: yes\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_001.yml::user books a restaurant with an alternative time 001","user_uttered":"I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that sounds fine.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Alright, that sounds fine.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_001.yml::user books a restaurant with an alternative time 001","user_uttered":"Alright, that sounds fine.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that sounds fine.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Alright, that sounds fine.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that sounds fine.\nAI: Would you like to change the reservation time?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(confirm_slot_correction, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_001.yml::user books a restaurant with an alternative time 001","user_uttered":"Absolutely.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that sounds fine.\nAI: Would you like to change the reservation time?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(confirm_slot_correction, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that sounds fine.\nAI: Would you like to change the reservation time?\nUSER: Absolutely.\nAI: Great, I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The name for the reservation is Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The name for the reservation is Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_001.yml::user books a restaurant with an alternative time 001","user_uttered":"The name for the reservation is Emil.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that sounds fine.\nAI: Would you like to change the reservation time?\nUSER: Absolutely.\nAI: Great, I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The name for the reservation is Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The name for the reservation is Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that sounds fine.\nAI: Would you like to change the reservation time?\nUSER: Absolutely.\nAI: Great, I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The name for the reservation is Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Sure thing.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure thing.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_001.yml::user books a restaurant with an alternative time 001","user_uttered":"Sure thing.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to secure a reservation for four at Xaigon, at 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that sounds fine.\nAI: Would you like to change the reservation time?\nUSER: Absolutely.\nAI: Great, I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The name for the reservation is Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Sure thing.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure thing.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to make a booking for four people at Xaigon for 7pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_002.yml::user books a restaurant with an alternative time 002","user_uttered":"I'd like to make a booking for four people at Xaigon for 7pm tonight.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to make a booking for four people at Xaigon for 7pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that seems like a good idea.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Okay, that seems like a good idea.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_002.yml::user books a restaurant with an alternative time 002","user_uttered":"Okay, that seems like a good idea.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that seems like a good idea.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Okay, that seems like a good idea.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that seems like a good idea.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(confirm_slot_correction, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_002.yml::user books a restaurant with an alternative time 002","user_uttered":"Definitely.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that seems like a good idea.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(confirm_slot_correction, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that seems like a good idea.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Definitely.\nAI: Sure thing! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please make the reservation under Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please make the reservation under Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_002.yml::user books a restaurant with an alternative time 002","user_uttered":"Please make the reservation under Emil.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that seems like a good idea.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Definitely.\nAI: Sure thing! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please make the reservation under Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please make the reservation under Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that seems like a good idea.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Definitely.\nAI: Sure thing! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please make the reservation under Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_002.yml::user books a restaurant with an alternative time 002","user_uttered":"Definitely.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a booking for four people at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that seems like a good idea.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Definitely.\nAI: Sure thing! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please make the reservation under Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I book a table for four at Xaigon for 7pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_003.yml::user books a restaurant with an alternative time 003","user_uttered":"Could I book a table for four at Xaigon for 7pm tonight?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I book a table for four at Xaigon for 7pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's acceptable.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure, that's acceptable.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_003.yml::user books a restaurant with an alternative time 003","user_uttered":"Sure, that's acceptable.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's acceptable.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure, that's acceptable.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's acceptable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(confirm_slot_correction, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_003.yml::user books a restaurant with an alternative time 003","user_uttered":"Of course.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's acceptable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(confirm_slot_correction, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's acceptable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Of course.\nAI: Great! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: You can put the reservation under Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"You can put the reservation under Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_003.yml::user books a restaurant with an alternative time 003","user_uttered":"You can put the reservation under Emil.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's acceptable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Of course.\nAI: Great! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: You can put the reservation under Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"You can put the reservation under Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's acceptable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Of course.\nAI: Great! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: You can put the reservation under Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_003.yml::user books a restaurant with an alternative time 003","user_uttered":"Of course.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I book a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's acceptable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Of course.\nAI: Great! I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: You can put the reservation under Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to reserve a table for four at Xaigon for 7pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_004.yml::user books a restaurant with an alternative time 004","user_uttered":"I need to reserve a table for four at Xaigon for 7pm tonight.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to reserve a table for four at Xaigon for 7pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that's agreeable.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Alright, that's agreeable.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_004.yml::user books a restaurant with an alternative time 004","user_uttered":"Alright, that's agreeable.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that's agreeable.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Alright, that's agreeable.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that's agreeable.\nAI: Would you like to change the reservation time?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(confirm_slot_correction, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_004.yml::user books a restaurant with an alternative time 004","user_uttered":"Indeed.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that's agreeable.\nAI: Would you like to change the reservation time?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(confirm_slot_correction, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that's agreeable.\nAI: Would you like to change the reservation time?\nUSER: Indeed.\nAI: Great, I'll go ahead and change the reservation time to 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The booking should be in the name of Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The booking should be in the name of Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_004.yml::user books a restaurant with an alternative time 004","user_uttered":"The booking should be in the name of Emil.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that's agreeable.\nAI: Would you like to change the reservation time?\nUSER: Indeed.\nAI: Great, I'll go ahead and change the reservation time to 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The booking should be in the name of Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The booking should be in the name of Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that's agreeable.\nAI: Would you like to change the reservation time?\nUSER: Indeed.\nAI: Great, I'll go ahead and change the reservation time to 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The booking should be in the name of Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_004.yml::user books a restaurant with an alternative time 004","user_uttered":"Indeed.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to reserve a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Alright, that's agreeable.\nAI: Would you like to change the reservation time?\nUSER: Indeed.\nAI: Great, I'll go ahead and change the reservation time to 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The booking should be in the name of Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in booking a table for four at Xaigon for 7pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_005.yml::user books a restaurant with an alternative time 005","user_uttered":"I'm interested in booking a table for four at Xaigon for 7pm tonight.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in booking a table for four at Xaigon for 7pm tonight.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that's suitable.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Okay, that's suitable.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_005.yml::user books a restaurant with an alternative time 005","user_uttered":"Okay, that's suitable.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that's suitable.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Okay, that's suitable.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that's suitable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(confirm_slot_correction, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_005.yml::user books a restaurant with an alternative time 005","user_uttered":"Certainly.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that's suitable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(confirm_slot_correction, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that's suitable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Certainly.\nAI: Great, I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please book it under the name Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please book it under the name Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_005.yml::user books a restaurant with an alternative time 005","user_uttered":"Please book it under the name Emil.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that's suitable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Certainly.\nAI: Great, I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please book it under the name Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please book it under the name Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that's suitable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Certainly.\nAI: Great, I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please book it under the name Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_005.yml::user books a restaurant with an alternative time 005","user_uttered":"Certainly.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in booking a table for four at Xaigon for 7pm tonight.\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Okay, that's suitable.\nAI: Would you like to change the reservation time for the restaurant?\nUSER: Certainly.\nAI: Great, I'll go ahead and change the reservation time to 8pm for you.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: Please book it under the name Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I arrange a table for four at Xaigon for 7pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_006.yml::user books a restaurant with an alternative time 006","user_uttered":"Can I arrange a table for four at Xaigon for 7pm tonight?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I arrange a table for four at Xaigon for 7pm tonight?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)\nSetSlot(book_restaurant_name_of_restaurant, Xaigon)\nSetSlot(book_restaurant_number_of_people, 4)\nSetSlot(book_restaurant_date, tonight)\nSetSlot(book_restaurant_time, 7pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's a good alternative.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure, that's a good alternative.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_time, 8pm)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_006.yml::user books a restaurant with an alternative time 006","user_uttered":"Sure, that's a good alternative.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's a good alternative.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_alternative_dummy\" (do not fill this slot, instead fill the given parts of the alternative into their respective slots).\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 7pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure, that's a good alternative.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's a good alternative.\nAI: Would you like to change the reservation time?\nUSER: Without a doubt.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Without a doubt.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(confirm_slot_correction, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_006.yml::user books a restaurant with an alternative time 006","user_uttered":"Without a doubt.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's a good alternative.\nAI: Would you like to change the reservation time?\nUSER: Without a doubt.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Without a doubt.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(confirm_slot_correction, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's a good alternative.\nAI: Would you like to change the reservation time?\nUSER: Without a doubt.\nAI: Great, I'll go ahead and change the reservation time to 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The reservation is for Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The reservation is for Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Emil)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_006.yml::user books a restaurant with an alternative time 006","user_uttered":"The reservation is for Emil.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's a good alternative.\nAI: Would you like to change the reservation time?\nUSER: Without a doubt.\nAI: Great, I'll go ahead and change the reservation time to 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The reservation is for Emil.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The reservation is for Emil.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Emil)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's a good alternative.\nAI: Would you like to change the reservation time?\nUSER: Without a doubt.\nAI: Great, I'll go ahead and change the reservation time to 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The reservation is for Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Without a doubt.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Without a doubt.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user books a restaurant with an alternative time ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_books_a_restaurant_with_an_alternative_time_006.yml::user books a restaurant with an alternative time 006","user_uttered":"Without a doubt.","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I arrange a table for four at Xaigon for 7pm tonight?\nAI: Unfortunately, that time isn't available.\nAI: How about Tuesday 8PM, instead?\nUSER: Sure, that's a good alternative.\nAI: Would you like to change the reservation time?\nUSER: Without a doubt.\nAI: Great, I'll go ahead and change the reservation time to 8pm.\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: The reservation is for Emil.\nAI: A table for 4 at Xaigon for tonight, 8pm. Do you confirm the booking?\nUSER: Without a doubt.\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Xaigon, type: text, description: None\n- name: book_restaurant_number_of_people, value: 4, type: text, description: None\n- name: book_restaurant_date, value: tonight, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Emil, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Without a doubt.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send money to Joe\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_000.yml::user cancels during a correction 000","user_uttered":"I want to send money to Joe","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send money to Joe\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send money to Joe\nAI: How much money do you want to transfer?\nUSER: oh sorry I meant John\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_000.yml::user cancels during a correction 000","user_uttered":"oh sorry I meant John","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send money to Joe\nAI: How much money do you want to transfer?\nUSER: oh sorry I meant John\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send money to Joe\nAI: How much money do you want to transfer?\nUSER: oh sorry I meant John\nAI: Would you like to change the recipient for the money transfer?\nUSER: nevermind, cancel the transfer\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"nevermind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_000.yml::user cancels during a correction 000","user_uttered":"nevermind, cancel the transfer","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send money to Joe\nAI: How much money do you want to transfer?\nUSER: oh sorry I meant John\nAI: Would you like to change the recipient for the money transfer?\nUSER: nevermind, cancel the transfer\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"nevermind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to transfer some cash to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to transfer some cash to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_001.yml::user cancels during a correction 001","user_uttered":"I need to transfer some cash to Joe.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to transfer some cash to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to transfer some cash to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to transfer some cash to Joe.\nAI: How much money do you want to transfer?\nUSER: Oops, I meant to say John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Oops, I meant to say John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_001.yml::user cancels during a correction 001","user_uttered":"Oops, I meant to say John.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to transfer some cash to Joe.\nAI: How much money do you want to transfer?\nUSER: Oops, I meant to say John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Oops, I meant to say John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to transfer some cash to Joe.\nAI: How much money do you want to transfer?\nUSER: Oops, I meant to say John.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: Forget it, just cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Forget it, just cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_001.yml::user cancels during a correction 001","user_uttered":"Forget it, just cancel the transfer.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to transfer some cash to Joe.\nAI: How much money do you want to transfer?\nUSER: Oops, I meant to say John.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: Forget it, just cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Forget it, just cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to make a money transfer to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to make a money transfer to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_002.yml::user cancels during a correction 002","user_uttered":"I'd like to make a money transfer to Joe.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to make a money transfer to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to make a money transfer to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a money transfer to Joe.\nAI: How much money do you want to transfer?\nUSER: I made a mistake, it's John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I made a mistake, it's John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_002.yml::user cancels during a correction 002","user_uttered":"I made a mistake, it's John.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a money transfer to Joe.\nAI: How much money do you want to transfer?\nUSER: I made a mistake, it's John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I made a mistake, it's John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a money transfer to Joe.\nAI: How much money do you want to transfer?\nUSER: I made a mistake, it's John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: I've changed my mind, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I've changed my mind, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_002.yml::user cancels during a correction 002","user_uttered":"I've changed my mind, cancel the transfer.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a money transfer to Joe.\nAI: How much money do you want to transfer?\nUSER: I made a mistake, it's John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: I've changed my mind, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I've changed my mind, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to send some funds to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to send some funds to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_003.yml::user cancels during a correction 003","user_uttered":"I'm looking to send some funds to Joe.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to send some funds to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to send some funds to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to send some funds to Joe.\nAI: How much money do you want to transfer?\nUSER: Actually, the money is for John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually, the money is for John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_003.yml::user cancels during a correction 003","user_uttered":"Actually, the money is for John.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to send some funds to Joe.\nAI: How much money do you want to transfer?\nUSER: Actually, the money is for John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually, the money is for John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to send some funds to Joe.\nAI: How much money do you want to transfer?\nUSER: Actually, the money is for John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Please disregard that, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please disregard that, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_003.yml::user cancels during a correction 003","user_uttered":"Please disregard that, cancel the transfer.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to send some funds to Joe.\nAI: How much money do you want to transfer?\nUSER: Actually, the money is for John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Please disregard that, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please disregard that, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Joe needs to receive some money from me.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Joe needs to receive some money from me.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_004.yml::user cancels during a correction 004","user_uttered":"Joe needs to receive some money from me.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Joe needs to receive some money from me.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Joe needs to receive some money from me.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Joe needs to receive some money from me.\nAI: How much money do you want to transfer?\nUSER: I got the name wrong, it's John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I got the name wrong, it's John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_004.yml::user cancels during a correction 004","user_uttered":"I got the name wrong, it's John.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Joe needs to receive some money from me.\nAI: How much money do you want to transfer?\nUSER: I got the name wrong, it's John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I got the name wrong, it's John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Joe needs to receive some money from me.\nAI: How much money do you want to transfer?\nUSER: I got the name wrong, it's John.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: I no longer want to proceed, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I no longer want to proceed, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_004.yml::user cancels during a correction 004","user_uttered":"I no longer want to proceed, cancel the transfer.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Joe needs to receive some money from me.\nAI: How much money do you want to transfer?\nUSER: I got the name wrong, it's John.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: I no longer want to proceed, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I no longer want to proceed, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have to wire some money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have to wire some money to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_005.yml::user cancels during a correction 005","user_uttered":"I have to wire some money to Joe.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have to wire some money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have to wire some money to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to wire some money to Joe.\nAI: How much money do you want to transfer?\nUSER: I misspoke, the money should go to John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I misspoke, the money should go to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_005.yml::user cancels during a correction 005","user_uttered":"I misspoke, the money should go to John.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to wire some money to Joe.\nAI: How much money do you want to transfer?\nUSER: I misspoke, the money should go to John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I misspoke, the money should go to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to wire some money to Joe.\nAI: How much money do you want to transfer?\nUSER: I misspoke, the money should go to John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: I've reconsidered, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I've reconsidered, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_005.yml::user cancels during a correction 005","user_uttered":"I've reconsidered, cancel the transfer.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to wire some money to Joe.\nAI: How much money do you want to transfer?\nUSER: I misspoke, the money should go to John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: I've reconsidered, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I've reconsidered, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to remit some money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to remit some money to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_006.yml::user cancels during a correction 006","user_uttered":"I wish to remit some money to Joe.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to remit some money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to remit some money to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit some money to Joe.\nAI: How much money do you want to transfer?\nUSER: John is the correct name, not Joe.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"John is the correct name, not Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_006.yml::user cancels during a correction 006","user_uttered":"John is the correct name, not Joe.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit some money to Joe.\nAI: How much money do you want to transfer?\nUSER: John is the correct name, not Joe.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"John is the correct name, not Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit some money to Joe.\nAI: How much money do you want to transfer?\nUSER: John is the correct name, not Joe.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: I want to back out, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to back out, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_006.yml::user cancels during a correction 006","user_uttered":"I want to back out, cancel the transfer.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit some money to Joe.\nAI: How much money do you want to transfer?\nUSER: John is the correct name, not Joe.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: I want to back out, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to back out, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm thinking of sending Joe some money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm thinking of sending Joe some money.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_007.yml::user cancels during a correction 007","user_uttered":"I'm thinking of sending Joe some money.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm thinking of sending Joe some money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm thinking of sending Joe some money.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of sending Joe some money.\nAI: How much money do you want to transfer?\nUSER: I apologize, I meant John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I apologize, I meant John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_007.yml::user cancels during a correction 007","user_uttered":"I apologize, I meant John.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of sending Joe some money.\nAI: How much money do you want to transfer?\nUSER: I apologize, I meant John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I apologize, I meant John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of sending Joe some money.\nAI: How much money do you want to transfer?\nUSER: I apologize, I meant John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: I've had a change of heart, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I've had a change of heart, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_007.yml::user cancels during a correction 007","user_uttered":"I've had a change of heart, cancel the transfer.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of sending Joe some money.\nAI: How much money do you want to transfer?\nUSER: I apologize, I meant John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: I've had a change of heart, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I've had a change of heart, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm considering transferring some money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm considering transferring some money to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_008.yml::user cancels during a correction 008","user_uttered":"I'm considering transferring some money to Joe.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm considering transferring some money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm considering transferring some money to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm considering transferring some money to Joe.\nAI: How much money do you want to transfer?\nUSER: I made an error, I intended to say John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I made an error, I intended to say John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_008.yml::user cancels during a correction 008","user_uttered":"I made an error, I intended to say John.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm considering transferring some money to Joe.\nAI: How much money do you want to transfer?\nUSER: I made an error, I intended to say John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I made an error, I intended to say John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm considering transferring some money to Joe.\nAI: How much money do you want to transfer?\nUSER: I made an error, I intended to say John.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: I don't want to continue, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I don't want to continue, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_008.yml::user cancels during a correction 008","user_uttered":"I don't want to continue, cancel the transfer.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm considering transferring some money to Joe.\nAI: How much money do you want to transfer?\nUSER: I made an error, I intended to say John.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: I don't want to continue, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I don't want to continue, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Joe is the one I want to send money to.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Joe is the one I want to send money to.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_009.yml::user cancels during a correction 009","user_uttered":"Joe is the one I want to send money to.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Joe is the one I want to send money to.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Joe is the one I want to send money to.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Joe is the one I want to send money to.\nAI: How much money do you want to transfer?\nUSER: Sorry for the confusion, I meant John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sorry for the confusion, I meant John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_009.yml::user cancels during a correction 009","user_uttered":"Sorry for the confusion, I meant John.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Joe is the one I want to send money to.\nAI: How much money do you want to transfer?\nUSER: Sorry for the confusion, I meant John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sorry for the confusion, I meant John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Joe is the one I want to send money to.\nAI: How much money do you want to transfer?\nUSER: Sorry for the confusion, I meant John.\nAI: No problem! Would you like to change the recipient for the money transfer to John?\nUSER: I've decided against it, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I've decided against it, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_009.yml::user cancels during a correction 009","user_uttered":"I've decided against it, cancel the transfer.","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Joe is the one I want to send money to.\nAI: How much money do you want to transfer?\nUSER: Sorry for the confusion, I meant John.\nAI: No problem! Would you like to change the recipient for the money transfer to John?\nUSER: I've decided against it, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I've decided against it, cancel the transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have a need to send some money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have a need to send some money to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)","test_name":"user cancels during a correction ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_010.yml::user cancels during a correction 010","user_uttered":"I have a need to send some money to Joe.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have a need to send some money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have a need to send some money to Joe.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have a need to send some money to Joe.\nAI: How much money do you want to transfer?\nUSER: My bad, the money is intended for John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My bad, the money is intended for John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user cancels during a correction ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_010.yml::user cancels during a correction 010","user_uttered":"My bad, the money is intended for John.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have a need to send some money to Joe.\nAI: How much money do you want to transfer?\nUSER: My bad, the money is intended for John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My bad, the money is intended for John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have a need to send some money to Joe.\nAI: How much money do you want to transfer?\nUSER: My bad, the money is intended for John.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: I want to abort the process, cancel the transfer.'\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to abort the process, cancel the transfer.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user cancels during a correction ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_cancels_during_a_correction_010.yml::user cancels during a correction 010","user_uttered":"I want to abort the process, cancel the transfer.'","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have a need to send some money to Joe.\nAI: How much money do you want to transfer?\nUSER: My bad, the money is intended for John.\nAI: Would you like to change the recipient for the money transfer to John?\nUSER: I want to abort the process, cancel the transfer.'\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to abort the process, cancel the transfer.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to transfer money\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to transfer money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)","test_name":"user corrects recipient in the next message ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_corrects_recipient_in_the_next_message_000.yml::user corrects recipient in the next message 000","user_uttered":"I want to transfer money","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to transfer money\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to transfer money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, John)","test_name":"user corrects recipient in the next message ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_corrects_recipient_in_the_next_message_000.yml::user corrects recipient in the next message 000","user_uttered":"John","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say Joe\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sorry, I meant to say Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_recipient, Joe)","test_name":"user corrects recipient in the next message ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_corrects_recipient_in_the_next_message_000.yml::user corrects recipient in the next message 000","user_uttered":"Sorry, I meant to say Joe","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say Joe\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sorry, I meant to say Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_recipient, Joe)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say Joe\nAI: Would you like to change the recipient for the money transfer?\nUSER: yes\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(confirm_slot_correction, True)","test_name":"user corrects recipient in the next message ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_corrects_recipient_in_the_next_message_000.yml::user corrects recipient in the next message 000","user_uttered":"yes","current_flow":"pattern_correction","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say Joe\nAI: Would you like to change the recipient for the money transfer?\nUSER: yes\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\".\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(confirm_slot_correction, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say Joe\nAI: Would you like to change the recipient for the money transfer?\nUSER: yes\nAI: Great, I have changed the recipient for the money transfer to Joe. Would you like to continue with the transfer?\nAI: How much money do you want to transfer?\nUSER: 50\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_amount_of_money, 50)","test_name":"user corrects recipient in the next message ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_corrects_recipient_in_the_next_message_000.yml::user corrects recipient in the next message 000","user_uttered":"50","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say Joe\nAI: Would you like to change the recipient for the money transfer?\nUSER: yes\nAI: Great, I have changed the recipient for the money transfer to Joe. Would you like to continue with the transfer?\nAI: How much money do you want to transfer?\nUSER: 50\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_amount_of_money, 50)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say Joe\nAI: Would you like to change the recipient for the money transfer?\nUSER: yes\nAI: Great, I have changed the recipient for the money transfer to Joe. Would you like to continue with the transfer?\nAI: How much money do you want to transfer?\nUSER: 50\nAI: Would you like to transfer 50 to Joe?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user corrects recipient in the next message ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_corrects_recipient_in_the_next_message_000.yml::user corrects recipient in the next message 000","user_uttered":"yes","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money\nAI: Who do you want to transfer money to?\nUSER: John\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say Joe\nAI: Would you like to change the recipient for the money transfer?\nUSER: yes\nAI: Great, I have changed the recipient for the money transfer to Joe. Would you like to continue with the transfer?\nAI: How much money do you want to transfer?\nUSER: 50\nAI: Would you like to transfer 50 to Joe?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Book table\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Book table\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(book_restaurant)","test_name":"user makes an intermittent flow switch ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_makes_an_intermittent_flow_switch_000.yml::user makes an intermittent flow switch 000","user_uttered":"Book table","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Book table\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Book table\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(book_restaurant)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_name_of_restaurant\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: undefined, type: text, description: None\n- name: book_restaurant_number_of_people, value: undefined, type: text, description: None\n- name: book_restaurant_date, value: undefined, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance, did my paycheck already arrive?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(check_balance)","test_name":"user makes an intermittent flow switch ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_makes_an_intermittent_flow_switch_000.yml::user makes an intermittent flow switch 000","user_uttered":"Show my balance, did my paycheck already arrive?","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_name_of_restaurant\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: undefined, type: text, description: None\n- name: book_restaurant_number_of_people, value: undefined, type: text, description: None\n- name: book_restaurant_date, value: undefined, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance, did my paycheck already arrive?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(check_balance)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_name_of_restaurant\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: undefined, type: text, description: None\n- name: book_restaurant_number_of_people, value: undefined, type: text, description: None\n- name: book_restaurant_date, value: undefined, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah great, I already got my paycheck, we'll be going to Brewdog then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_name_of_restaurant, Brewdog)","test_name":"user makes an intermittent flow switch ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_makes_an_intermittent_flow_switch_000.yml::user makes an intermittent flow switch 000","user_uttered":"Ah great, I already got my paycheck, we'll be going to Brewdog then","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_name_of_restaurant\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: undefined, type: text, description: None\n- name: book_restaurant_number_of_people, value: undefined, type: text, description: None\n- name: book_restaurant_date, value: undefined, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah great, I already got my paycheck, we'll be going to Brewdog then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_name_of_restaurant, Brewdog)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_number_of_people\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: undefined, type: text, description: None\n- name: book_restaurant_date, value: undefined, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"For 6\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_number_of_people, 6)","test_name":"user makes an intermittent flow switch ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_makes_an_intermittent_flow_switch_000.yml::user makes an intermittent flow switch 000","user_uttered":"For 6","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_number_of_people\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: undefined, type: text, description: None\n- name: book_restaurant_date, value: undefined, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"For 6\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_number_of_people, 6)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\nAI: For which day do you want to book?\nUSER: This Friday\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_date\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: 6, type: text, description: None\n- name: book_restaurant_date, value: undefined, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"This Friday\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_date, this Friday)","test_name":"user makes an intermittent flow switch ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_makes_an_intermittent_flow_switch_000.yml::user makes an intermittent flow switch 000","user_uttered":"This Friday","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\nAI: For which day do you want to book?\nUSER: This Friday\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_date\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: 6, type: text, description: None\n- name: book_restaurant_date, value: undefined, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"This Friday\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_date, this Friday)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\nAI: For which day do you want to book?\nUSER: This Friday\nAI: And what time?\nUSER: 8pm please\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_time\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: 6, type: text, description: None\n- name: book_restaurant_date, value: this Friday, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"8pm please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_time, 8pm)","test_name":"user makes an intermittent flow switch ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_makes_an_intermittent_flow_switch_000.yml::user makes an intermittent flow switch 000","user_uttered":"8pm please","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\nAI: For which day do you want to book?\nUSER: This Friday\nAI: And what time?\nUSER: 8pm please\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_time\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: 6, type: text, description: None\n- name: book_restaurant_date, value: this Friday, type: text, description: None\n- name: book_restaurant_time, value: undefined, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"8pm please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_time, 8pm)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\nAI: For which day do you want to book?\nUSER: This Friday\nAI: And what time?\nUSER: 8pm please\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: For Thomas\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: 6, type: text, description: None\n- name: book_restaurant_date, value: this Friday, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"For Thomas\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_reservation_name, Thomas)","test_name":"user makes an intermittent flow switch ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_makes_an_intermittent_flow_switch_000.yml::user makes an intermittent flow switch 000","user_uttered":"For Thomas","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\nAI: For which day do you want to book?\nUSER: This Friday\nAI: And what time?\nUSER: 8pm please\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: For Thomas\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_reservation_name\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: 6, type: text, description: None\n- name: book_restaurant_date, value: this Friday, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"For Thomas\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_reservation_name, Thomas)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\nAI: For which day do you want to book?\nUSER: This Friday\nAI: And what time?\nUSER: 8pm please\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: For Thomas\nAI: A table for 6 at Brewdog for this Friday, 8pm. Do you confirm the booking?\nUSER: Yes\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: 6, type: text, description: None\n- name: book_restaurant_date, value: this Friday, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Thomas, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(book_restaurant_confirmation, True)","test_name":"user makes an intermittent flow switch ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_makes_an_intermittent_flow_switch_000.yml::user makes an intermittent flow switch 000","user_uttered":"Yes","current_flow":"book_restaurant","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    slot: book_restaurant_reservation_name\n    slot: book_restaurant_confirmation, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Book table\nAI: What's the name of the restaurant you are interested in?\nUSER: Show my balance, did my paycheck already arrive?\nAI: You still have 4200 in your account.\nAI: Sure, let's go ahead and book a table at the restaurant.\nAI: What's the name of the restaurant you are interested in?\nUSER: Ah great, I already got my paycheck, we'll be going to Brewdog then\nAI: How many people are we talking?\nUSER: For 6\nAI: For which day do you want to book?\nUSER: This Friday\nAI: And what time?\nUSER: 8pm please\nAI: They have a table available for you at that time.\nAI: what name should I make the reservation for?\nUSER: For Thomas\nAI: A table for 6 at Brewdog for this Friday, 8pm. Do you confirm the booking?\nUSER: Yes\n\n===\n\nYou are currently in the flow \"book_restaurant\".\nYou have just asked the user for the slot \"book_restaurant_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: book_restaurant_name_of_restaurant, value: Brewdog, type: text, description: None\n- name: book_restaurant_number_of_people, value: 6, type: text, description: None\n- name: book_restaurant_date, value: this Friday, type: text, description: None\n- name: book_restaurant_time, value: 8pm, type: text, description: None\n- name: book_restaurant_is_date_flexible, value: True, type: bool, description: (True\/False) whether offering alternative dates make sense, allowed values: [True, False]\n- name: book_restaurant_alternative_dummy, value: undefined, type: text, description: do not fill this slot, instead fill the given parts of the alternative into their respective slots\n- name: book_restaurant_reservation_name, value: Thomas, type: text, description: None\n- name: book_restaurant_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(book_restaurant_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to verify my account\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to verify my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(verify_account)","test_name":"user refuses to provide information ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_000.yml::user refuses to provide information 000","user_uttered":"I want to verify my account","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to verify my account\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to verify my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(verify_account)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's thomas@x.com\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's thomas@x.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(verify_account_email, thomas@x.com)","test_name":"user refuses to provide information ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_000.yml::user refuses to provide information 000","user_uttered":"It's thomas@x.com","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's thomas@x.com\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's thomas@x.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(verify_account_email, thomas@x.com)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's thomas@x.com\nAI: Are you based in California?\nUSER: Yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(based_in_california, True)","test_name":"user refuses to provide information ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_000.yml::user refuses to provide information 000","user_uttered":"Yes","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's thomas@x.com\nAI: Are you based in California?\nUSER: Yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(based_in_california, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's thomas@x.com\nAI: Are you based in California?\nUSER: Yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that your business?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why is that your business?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user refuses to provide information ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_000.yml::user refuses to provide information 000","user_uttered":"Why is that your business?","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's thomas@x.com\nAI: Are you based in California?\nUSER: Yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that your business?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why is that your business?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's thomas@x.com\nAI: Are you based in California?\nUSER: Yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that your business?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: nevermind then!!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"nevermind then!!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user refuses to provide information ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_000.yml::user refuses to provide information 000","user_uttered":"nevermind then!!","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's thomas@x.com\nAI: Are you based in California?\nUSER: Yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that your business?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: nevermind then!!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"nevermind then!!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to confirm my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to confirm my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(verify_account)","test_name":"user refuses to provide information ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_001.yml::user refuses to provide information 001","user_uttered":"I need to confirm my account.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to confirm my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to confirm my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(verify_account)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to confirm my account.\nAI: What's your email address?\nUSER: My email is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My email is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(verify_account_email, thomas@x.com)","test_name":"user refuses to provide information ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_001.yml::user refuses to provide information 001","user_uttered":"My email is thomas@x.com.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to confirm my account.\nAI: What's your email address?\nUSER: My email is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My email is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(verify_account_email, thomas@x.com)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to confirm my account.\nAI: What's your email address?\nUSER: My email is thomas@x.com.\nAI: Are you based in California?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(based_in_california, True)","test_name":"user refuses to provide information ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_001.yml::user refuses to provide information 001","user_uttered":"Indeed.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to confirm my account.\nAI: What's your email address?\nUSER: My email is thomas@x.com.\nAI: Are you based in California?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(based_in_california, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to confirm my account.\nAI: What's your email address?\nUSER: My email is thomas@x.com.\nAI: Are you based in California?\nUSER: Indeed.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why do you need to know that?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why do you need to know that?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user refuses to provide information ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_001.yml::user refuses to provide information 001","user_uttered":"Why do you need to know that?","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to confirm my account.\nAI: What's your email address?\nUSER: My email is thomas@x.com.\nAI: Are you based in California?\nUSER: Indeed.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why do you need to know that?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why do you need to know that?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to confirm my account.\nAI: What's your email address?\nUSER: My email is thomas@x.com.\nAI: Are you based in California?\nUSER: Indeed.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why do you need to know that?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Forget it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Forget it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user refuses to provide information ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_001.yml::user refuses to provide information 001","user_uttered":"Forget it then!","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to confirm my account.\nAI: What's your email address?\nUSER: My email is thomas@x.com.\nAI: Are you based in California?\nUSER: Indeed.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why do you need to know that?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Forget it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Forget it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I authenticate my account?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I authenticate my account?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(verify_account)","test_name":"user refuses to provide information ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_002.yml::user refuses to provide information 002","user_uttered":"Can I authenticate my account?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I authenticate my account?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I authenticate my account?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(verify_account)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I authenticate my account?\nAI: What's your email address?\nUSER: The email address is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The email address is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(verify_account_email, thomas@x.com)","test_name":"user refuses to provide information ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_002.yml::user refuses to provide information 002","user_uttered":"The email address is thomas@x.com.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I authenticate my account?\nAI: What's your email address?\nUSER: The email address is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"The email address is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(verify_account_email, thomas@x.com)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I authenticate my account?\nAI: What's your email address?\nUSER: The email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Affirmative.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Affirmative.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(based_in_california, True)","test_name":"user refuses to provide information ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_002.yml::user refuses to provide information 002","user_uttered":"Affirmative.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I authenticate my account?\nAI: What's your email address?\nUSER: The email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Affirmative.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Affirmative.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(based_in_california, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I authenticate my account?\nAI: What's your email address?\nUSER: The email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Affirmative.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: What's the reason for asking?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's the reason for asking?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user refuses to provide information ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_002.yml::user refuses to provide information 002","user_uttered":"What's the reason for asking?","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I authenticate my account?\nAI: What's your email address?\nUSER: The email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Affirmative.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: What's the reason for asking?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's the reason for asking?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I authenticate my account?\nAI: What's your email address?\nUSER: The email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Affirmative.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: What's the reason for asking?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Let's drop it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Let's drop it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user refuses to provide information ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_002.yml::user refuses to provide information 002","user_uttered":"Let's drop it then!","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I authenticate my account?\nAI: What's your email address?\nUSER: The email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Affirmative.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: What's the reason for asking?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Let's drop it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Let's drop it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to certify my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to certify my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(verify_account)","test_name":"user refuses to provide information ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_003.yml::user refuses to provide information 003","user_uttered":"I'm looking to certify my account.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to certify my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to certify my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(verify_account)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to certify my account.\nAI: What's your email address?\nUSER: I use thomas@x.com for my email.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I use thomas@x.com for my email.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(verify_account_email, thomas@x.com)","test_name":"user refuses to provide information ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_003.yml::user refuses to provide information 003","user_uttered":"I use thomas@x.com for my email.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to certify my account.\nAI: What's your email address?\nUSER: I use thomas@x.com for my email.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I use thomas@x.com for my email.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(verify_account_email, thomas@x.com)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to certify my account.\nAI: What's your email address?\nUSER: I use thomas@x.com for my email.\nAI: Are you based in California?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(based_in_california, True)","test_name":"user refuses to provide information ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_003.yml::user refuses to provide information 003","user_uttered":"Absolutely.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to certify my account.\nAI: What's your email address?\nUSER: I use thomas@x.com for my email.\nAI: Are you based in California?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(based_in_california, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to certify my account.\nAI: What's your email address?\nUSER: I use thomas@x.com for my email.\nAI: Are you based in California?\nUSER: Absolutely.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why are you interested in that?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why are you interested in that?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user refuses to provide information ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_003.yml::user refuses to provide information 003","user_uttered":"Why are you interested in that?","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to certify my account.\nAI: What's your email address?\nUSER: I use thomas@x.com for my email.\nAI: Are you based in California?\nUSER: Absolutely.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why are you interested in that?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why are you interested in that?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to certify my account.\nAI: What's your email address?\nUSER: I use thomas@x.com for my email.\nAI: Are you based in California?\nUSER: Absolutely.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why are you interested in that?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I'll pass then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'll pass then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user refuses to provide information ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_003.yml::user refuses to provide information 003","user_uttered":"I'll pass then!","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to certify my account.\nAI: What's your email address?\nUSER: I use thomas@x.com for my email.\nAI: Are you based in California?\nUSER: Absolutely.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why are you interested in that?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I'll pass then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'll pass then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to verify my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to verify my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(verify_account)","test_name":"user refuses to provide information ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_004.yml::user refuses to provide information 004","user_uttered":"I wish to verify my account.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to verify my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to verify my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(verify_account)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to verify my account.\nAI: What's your email address?\nUSER: My email address is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My email address is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(verify_account_email, thomas@x.com)","test_name":"user refuses to provide information ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_004.yml::user refuses to provide information 004","user_uttered":"My email address is thomas@x.com.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to verify my account.\nAI: What's your email address?\nUSER: My email address is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My email address is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(verify_account_email, thomas@x.com)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to verify my account.\nAI: What's your email address?\nUSER: My email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(based_in_california, True)","test_name":"user refuses to provide information ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_004.yml::user refuses to provide information 004","user_uttered":"Certainly.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to verify my account.\nAI: What's your email address?\nUSER: My email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(based_in_california, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to verify my account.\nAI: What's your email address?\nUSER: My email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Certainly.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why do you require that information?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why do you require that information?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user refuses to provide information ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_004.yml::user refuses to provide information 004","user_uttered":"Why do you require that information?","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to verify my account.\nAI: What's your email address?\nUSER: My email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Certainly.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why do you require that information?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why do you require that information?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to verify my account.\nAI: What's your email address?\nUSER: My email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Certainly.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why do you require that information?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Disregard it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Disregard it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user refuses to provide information ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_004.yml::user refuses to provide information 004","user_uttered":"Disregard it then!","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to verify my account.\nAI: What's your email address?\nUSER: My email address is thomas@x.com.\nAI: Are you based in California?\nUSER: Certainly.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why do you require that information?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Disregard it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Disregard it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to establish the authenticity of my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to establish the authenticity of my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(verify_account)","test_name":"user refuses to provide information ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_005.yml::user refuses to provide information 005","user_uttered":"I need to establish the authenticity of my account.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to establish the authenticity of my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to establish the authenticity of my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(verify_account)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to establish the authenticity of my account.\nAI: What's your email address?\nUSER: My registered email is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My registered email is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(verify_account_email, thomas@x.com)","test_name":"user refuses to provide information ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_005.yml::user refuses to provide information 005","user_uttered":"My registered email is thomas@x.com.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to establish the authenticity of my account.\nAI: What's your email address?\nUSER: My registered email is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My registered email is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(verify_account_email, thomas@x.com)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to establish the authenticity of my account.\nAI: What's your email address?\nUSER: My registered email is thomas@x.com.\nAI: Are you based in California?\nUSER: Sure.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(based_in_california, True)","test_name":"user refuses to provide information ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_005.yml::user refuses to provide information 005","user_uttered":"Sure.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to establish the authenticity of my account.\nAI: What's your email address?\nUSER: My registered email is thomas@x.com.\nAI: Are you based in California?\nUSER: Sure.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(based_in_california, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to establish the authenticity of my account.\nAI: What's your email address?\nUSER: My registered email is thomas@x.com.\nAI: Are you based in California?\nUSER: Sure.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that of interest to you?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why is that of interest to you?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user refuses to provide information ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_005.yml::user refuses to provide information 005","user_uttered":"Why is that of interest to you?","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to establish the authenticity of my account.\nAI: What's your email address?\nUSER: My registered email is thomas@x.com.\nAI: Are you based in California?\nUSER: Sure.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that of interest to you?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why is that of interest to you?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to establish the authenticity of my account.\nAI: What's your email address?\nUSER: My registered email is thomas@x.com.\nAI: Are you based in California?\nUSER: Sure.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that of interest to you?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I'll forget it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'll forget it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user refuses to provide information ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_005.yml::user refuses to provide information 005","user_uttered":"I'll forget it then!","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to establish the authenticity of my account.\nAI: What's your email address?\nUSER: My registered email is thomas@x.com.\nAI: Are you based in California?\nUSER: Sure.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that of interest to you?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I'll forget it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'll forget it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I corroborate my account?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I corroborate my account?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(verify_account)","test_name":"user refuses to provide information ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_006.yml::user refuses to provide information 006","user_uttered":"Can I corroborate my account?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I corroborate my account?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I corroborate my account?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(verify_account)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I corroborate my account?\nAI: What's your email address?\nUSER: I use the email thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I use the email thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(verify_account_email, thomas@x.com)","test_name":"user refuses to provide information ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_006.yml::user refuses to provide information 006","user_uttered":"I use the email thomas@x.com.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I corroborate my account?\nAI: What's your email address?\nUSER: I use the email thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I use the email thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(verify_account_email, thomas@x.com)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I corroborate my account?\nAI: What's your email address?\nUSER: I use the email thomas@x.com.\nAI: Are you based in California?\nUSER: Right.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Right.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(based_in_california, True)","test_name":"user refuses to provide information ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_006.yml::user refuses to provide information 006","user_uttered":"Right.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I corroborate my account?\nAI: What's your email address?\nUSER: I use the email thomas@x.com.\nAI: Are you based in California?\nUSER: Right.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Right.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(based_in_california, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I corroborate my account?\nAI: What's your email address?\nUSER: I use the email thomas@x.com.\nAI: Are you based in California?\nUSER: Right.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why are you inquiring about that?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why are you inquiring about that?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user refuses to provide information ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_006.yml::user refuses to provide information 006","user_uttered":"Why are you inquiring about that?","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I corroborate my account?\nAI: What's your email address?\nUSER: I use the email thomas@x.com.\nAI: Are you based in California?\nUSER: Right.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why are you inquiring about that?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why are you inquiring about that?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I corroborate my account?\nAI: What's your email address?\nUSER: I use the email thomas@x.com.\nAI: Are you based in California?\nUSER: Right.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why are you inquiring about that?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Let's forget it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Let's forget it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user refuses to provide information ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_006.yml::user refuses to provide information 006","user_uttered":"Let's forget it then!","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I corroborate my account?\nAI: What's your email address?\nUSER: I use the email thomas@x.com.\nAI: Are you based in California?\nUSER: Right.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why are you inquiring about that?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Let's forget it then!\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Let's forget it then!\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm keen on verifying my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm keen on verifying my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(verify_account)","test_name":"user refuses to provide information ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_007.yml::user refuses to provide information 007","user_uttered":"I'm keen on verifying my account.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nhotel_search: search for hotels\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm keen on verifying my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm keen on verifying my account.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(verify_account)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on verifying my account.\nAI: What's your email address?\nUSER: My electronic mail is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My electronic mail is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(verify_account_email, thomas@x.com)","test_name":"user refuses to provide information ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_007.yml::user refuses to provide information 007","user_uttered":"My electronic mail is thomas@x.com.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on verifying my account.\nAI: What's your email address?\nUSER: My electronic mail is thomas@x.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"My electronic mail is thomas@x.com.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(verify_account_email, thomas@x.com)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on verifying my account.\nAI: What's your email address?\nUSER: My electronic mail is thomas@x.com.\nAI: Are you based in California?\nUSER: Positively.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Positively.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(based_in_california, True)","test_name":"user refuses to provide information ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_007.yml::user refuses to provide information 007","user_uttered":"Positively.","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on verifying my account.\nAI: What's your email address?\nUSER: My electronic mail is thomas@x.com.\nAI: Are you based in California?\nUSER: Positively.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Positively.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(based_in_california, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on verifying my account.\nAI: What's your email address?\nUSER: My electronic mail is thomas@x.com.\nAI: Are you based in California?\nUSER: Positively.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that pertinent?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why is that pertinent?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user refuses to provide information ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_007.yml::user refuses to provide information 007","user_uttered":"Why is that pertinent?","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on verifying my account.\nAI: What's your email address?\nUSER: My electronic mail is thomas@x.com.\nAI: Are you based in California?\nUSER: Positively.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that pertinent?\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Why is that pertinent?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on verifying my account.\nAI: What's your email address?\nUSER: My electronic mail is thomas@x.com.\nAI: Are you based in California?\nUSER: Positively.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that pertinent?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I'll let it go then!'\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'll let it go then!'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user refuses to provide information ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_refuses_to_provide_information_007.yml::user refuses to provide information 007","user_uttered":"I'll let it go then!'","current_flow":"verify_account","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nhealth_advice: user asks for health advice\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\"\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on verifying my account.\nAI: What's your email address?\nUSER: My electronic mail is thomas@x.com.\nAI: Are you based in California?\nUSER: Positively.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Why is that pertinent?\nAI: For Californian residents, we collect information on annual earnings to comply with state laws for financial services. This is only needed if you want to verify your account for higher transaction limits. Rest assured, your data is safe with us.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I'll let it go then!'\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: thomas@x.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'll let it go then!'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send 10 bucks to Spencer\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 10 bucks to Spencer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_000.yml::user says goodbye 000","user_uttered":"I want to send 10 bucks to Spencer","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send 10 bucks to Spencer\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 10 bucks to Spencer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send 10 bucks to Spencer\nAI: Would you like to transfer 10 to Spencer?\nUSER: Yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_000.yml::user says goodbye 000","user_uttered":"Yes","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send 10 bucks to Spencer\nAI: Would you like to transfer 10 to Spencer?\nUSER: Yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send 10 bucks to Spencer\nAI: Would you like to transfer 10 to Spencer?\nUSER: Yes\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Bye then\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Bye then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_000.yml::user says goodbye 000","user_uttered":"Bye then","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send 10 bucks to Spencer\nAI: Would you like to transfer 10 to Spencer?\nUSER: Yes\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Bye then\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Bye then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to transfer 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to transfer 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_001.yml::user says goodbye 001","user_uttered":"I'd like to transfer 10 dollars to Spencer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to transfer 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to transfer 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_001.yml::user says goodbye 001","user_uttered":"Indeed.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Indeed.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: See you later.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"See you later.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_001.yml::user says goodbye 001","user_uttered":"See you later.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Indeed.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: See you later.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"See you later.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I send Spencer a tenner?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I send Spencer a tenner?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_002.yml::user says goodbye 002","user_uttered":"Could I send Spencer a tenner?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I send Spencer a tenner?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I send Spencer a tenner?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I send Spencer a tenner?\nAI: Would you like to transfer 10 to Spencer?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_002.yml::user says goodbye 002","user_uttered":"Absolutely.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I send Spencer a tenner?\nAI: Would you like to transfer 10 to Spencer?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I send Spencer a tenner?\nAI: Would you like to transfer 10 to Spencer?\nUSER: Absolutely.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: Goodbye for now.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Goodbye for now.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_002.yml::user says goodbye 002","user_uttered":"Goodbye for now.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I send Spencer a tenner?\nAI: Would you like to transfer 10 to Spencer?\nUSER: Absolutely.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: Goodbye for now.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Goodbye for now.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to give Spencer 10 bucks.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to give Spencer 10 bucks.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_003.yml::user says goodbye 003","user_uttered":"I'm looking to give Spencer 10 bucks.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to give Spencer 10 bucks.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to give Spencer 10 bucks.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to give Spencer 10 bucks.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Sure.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_003.yml::user says goodbye 003","user_uttered":"Sure.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to give Spencer 10 bucks.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Sure.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to give Spencer 10 bucks.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Sure.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Farewell.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Farewell.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_003.yml::user says goodbye 003","user_uttered":"Farewell.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to give Spencer 10 bucks.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Sure.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Farewell.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Farewell.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to remit 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to remit 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_004.yml::user says goodbye 004","user_uttered":"I wish to remit 10 dollars to Spencer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to remit 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to remit 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_004.yml::user says goodbye 004","user_uttered":"Definitely.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Definitely.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: Catch you later.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Catch you later.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_004.yml::user says goodbye 004","user_uttered":"Catch you later.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Definitely.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: Catch you later.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Catch you later.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have an intention to dispatch 10 bucks to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have an intention to dispatch 10 bucks to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_005.yml::user says goodbye 005","user_uttered":"I have an intention to dispatch 10 bucks to Spencer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have an intention to dispatch 10 bucks to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have an intention to dispatch 10 bucks to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have an intention to dispatch 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_005.yml::user says goodbye 005","user_uttered":"Of course.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have an intention to dispatch 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have an intention to dispatch 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Of course.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: So long.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"So long.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_005.yml::user says goodbye 005","user_uttered":"So long.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have an intention to dispatch 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Of course.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: So long.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"So long.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm thinking of wiring 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm thinking of wiring 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_006.yml::user says goodbye 006","user_uttered":"I'm thinking of wiring 10 dollars to Spencer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm thinking of wiring 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm thinking of wiring 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of wiring 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Yep.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yep.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_006.yml::user says goodbye 006","user_uttered":"Yep.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of wiring 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Yep.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yep.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of wiring 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Yep.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: Adieu.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Adieu.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_006.yml::user says goodbye 006","user_uttered":"Adieu.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of wiring 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Yep.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else I can assist you with?\nUSER: Adieu.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Adieu.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to hand over 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to hand over 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_007.yml::user says goodbye 007","user_uttered":"I need to hand over 10 dollars to Spencer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to hand over 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to hand over 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to hand over 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Sure thing.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure thing.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_007.yml::user says goodbye 007","user_uttered":"Sure thing.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to hand over 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Sure thing.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure thing.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to hand over 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Sure thing.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Cheerio.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Cheerio.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_007.yml::user says goodbye 007","user_uttered":"Cheerio.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to hand over 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Sure thing.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Cheerio.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Cheerio.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm considering forwarding 10 bucks to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm considering forwarding 10 bucks to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_008.yml::user says goodbye 008","user_uttered":"I'm considering forwarding 10 bucks to Spencer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm considering forwarding 10 bucks to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm considering forwarding 10 bucks to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm considering forwarding 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Right.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Right.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_008.yml::user says goodbye 008","user_uttered":"Right.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm considering forwarding 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Right.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Right.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm considering forwarding 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Right.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Until next time.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Until next time.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_008.yml::user says goodbye 008","user_uttered":"Until next time.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm considering forwarding 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Right.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Until next time.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Until next time.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I plan to convey 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I plan to convey 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_009.yml::user says goodbye 009","user_uttered":"I plan to convey 10 dollars to Spencer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I plan to convey 10 dollars to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I plan to convey 10 dollars to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I plan to convey 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Affirmative.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Affirmative.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_009.yml::user says goodbye 009","user_uttered":"Affirmative.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I plan to convey 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Affirmative.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Affirmative.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I plan to convey 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Affirmative.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Take care.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Take care.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_009.yml::user says goodbye 009","user_uttered":"Take care.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I plan to convey 10 dollars to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Affirmative.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Take care.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Take care.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm aiming to dispatch 10 bucks to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm aiming to dispatch 10 bucks to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)","test_name":"user says goodbye ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_010.yml::user says goodbye 010","user_uttered":"I'm aiming to dispatch 10 bucks to Spencer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm aiming to dispatch 10 bucks to Spencer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm aiming to dispatch 10 bucks to Spencer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Spencer)\nSetSlot(transfer_money_amount_of_money, 10)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm aiming to dispatch 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user says goodbye ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_010.yml::user says goodbye 010","user_uttered":"Certainly.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm aiming to dispatch 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Spencer, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 10, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm aiming to dispatch 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Certainly.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Goodbye.'\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Goodbye.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"ChitChat()","test_name":"user says goodbye ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_says_goodbye_010.yml::user says goodbye 010","user_uttered":"Goodbye.'","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm aiming to dispatch 10 bucks to Spencer.\nAI: Would you like to transfer 10 to Spencer?\nUSER: Certainly.\nAI: Successfully transferred 10 to Spencer.\nAI: Is there anything else you need assistance with?\nUSER: Goodbye.'\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Goodbye.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"ChitChat()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Show my transactions and send money\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions and send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_000.yml::user starts multiple flows 000","user_uttered":"Show my transactions and send money","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Show my transactions and send money\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions and send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you display my transactions and facilitate a money transfer?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you display my transactions and facilitate a money transfer?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_001.yml::user starts multiple flows 001","user_uttered":"Can you display my transactions and facilitate a money transfer?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you display my transactions and facilitate a money transfer?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you display my transactions and facilitate a money transfer?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to view my transactions and also transfer some money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to view my transactions and also transfer some money.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_002.yml::user starts multiple flows 002","user_uttered":"I'd like to view my transactions and also transfer some money.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to view my transactions and also transfer some money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to view my transactions and also transfer some money.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you please show me my transactions and help me send some money?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you please show me my transactions and help me send some money?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_003.yml::user starts multiple flows 003","user_uttered":"Could you please show me my transactions and help me send some money?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you please show me my transactions and help me send some money?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you please show me my transactions and help me send some money?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to see my transactions and also want to send money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to see my transactions and also want to send money.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_004.yml::user starts multiple flows 004","user_uttered":"I need to see my transactions and also want to send money.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to see my transactions and also want to send money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to see my transactions and also want to send money.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I see my transactions and also make a money transfer?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I see my transactions and also make a money transfer?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_005.yml::user starts multiple flows 005","user_uttered":"Can I see my transactions and also make a money transfer?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I see my transactions and also make a money transfer?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can I see my transactions and also make a money transfer?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to check my transactions and also need to send money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my transactions and also need to send money.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_006.yml::user starts multiple flows 006","user_uttered":"I want to check my transactions and also need to send money.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nhealth_advice: user asks for health advice\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to check my transactions and also need to send money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my transactions and also need to send money.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I have a look at my transactions and also transfer money?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I have a look at my transactions and also transfer money?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_007.yml::user starts multiple flows 007","user_uttered":"Could I have a look at my transactions and also transfer money?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I have a look at my transactions and also transfer money?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I have a look at my transactions and also transfer money?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to see my transactions and also need to make a money transfer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to see my transactions and also need to make a money transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_008.yml::user starts multiple flows 008","user_uttered":"I wish to see my transactions and also need to make a money transfer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to see my transactions and also need to make a money transfer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to see my transactions and also need to make a money transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: May I view my transactions and also send some money?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"May I view my transactions and also send some money?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_009.yml::user starts multiple flows 009","user_uttered":"May I view my transactions and also send some money?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: May I view my transactions and also send some money?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"May I view my transactions and also send some money?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to check my transactions and also initiate a money transfer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to check my transactions and also initiate a money transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transaction_search)\nStartFlow(transfer_money)","test_name":"user starts multiple flows ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_starts_multiple_flows_010.yml::user starts multiple flows 010","user_uttered":"I'd like to check my transactions and also initiate a money transfer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to check my transactions and also initiate a money transfer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to check my transactions and also initiate a money transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transaction_search)\nStartFlow(transfer_money)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send 40 bucks to Ty\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_000.yml::user transfers money mentioning two slots upfront 000","user_uttered":"I want to send 40 bucks to Ty","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send 40 bucks to Ty\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send 40 bucks to Ty\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_000.yml::user transfers money mentioning two slots upfront 000","user_uttered":"yes","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send 40 bucks to Ty\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to transfer $40 to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to transfer $40 to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_001.yml::user transfers money mentioning two slots upfront 001","user_uttered":"I'm looking to transfer $40 to Ty.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to transfer $40 to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to transfer $40 to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to transfer $40 to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Sure.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_001.yml::user transfers money mentioning two slots upfront 001","user_uttered":"Sure.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to transfer $40 to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Sure.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I send Ty 40 dollars?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I send Ty 40 dollars?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_002.yml::user transfers money mentioning two slots upfront 002","user_uttered":"Could I send Ty 40 dollars?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I send Ty 40 dollars?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I send Ty 40 dollars?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I send Ty 40 dollars?\nAI: Would you like to transfer 40 to Ty?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_002.yml::user transfers money mentioning two slots upfront 002","user_uttered":"Absolutely.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I send Ty 40 dollars?\nAI: Would you like to transfer 40 to Ty?\nUSER: Absolutely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Absolutely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to move 40 dollars over to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to move 40 dollars over to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_003.yml::user transfers money mentioning two slots upfront 003","user_uttered":"I'd like to move 40 dollars over to Ty.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to move 40 dollars over to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to move 40 dollars over to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to move 40 dollars over to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_003.yml::user transfers money mentioning two slots upfront 003","user_uttered":"Of course.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to move 40 dollars over to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Of course.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Of course.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to get 40 bucks to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to get 40 bucks to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_004.yml::user transfers money mentioning two slots upfront 004","user_uttered":"I need to get 40 bucks to Ty.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to get 40 bucks to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to get 40 bucks to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to get 40 bucks to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_004.yml::user transfers money mentioning two slots upfront 004","user_uttered":"Definitely.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to get 40 bucks to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in sending Ty 40 dollars.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in sending Ty 40 dollars.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_005.yml::user transfers money mentioning two slots upfront 005","user_uttered":"I'm interested in sending Ty 40 dollars.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in sending Ty 40 dollars.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in sending Ty 40 dollars.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in sending Ty 40 dollars.\nAI: Would you like to transfer 40 to Ty?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_005.yml::user transfers money mentioning two slots upfront 005","user_uttered":"Indeed.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in sending Ty 40 dollars.\nAI: Would you like to transfer 40 to Ty?\nUSER: Indeed.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm thinking of transferring 40 dollars to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm thinking of transferring 40 dollars to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_006.yml::user transfers money mentioning two slots upfront 006","user_uttered":"I'm thinking of transferring 40 dollars to Ty.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm thinking of transferring 40 dollars to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm thinking of transferring 40 dollars to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of transferring 40 dollars to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Right.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Right.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_006.yml::user transfers money mentioning two slots upfront 006","user_uttered":"Right.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm thinking of transferring 40 dollars to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Right.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Right.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have to send 40 bucks to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have to send 40 bucks to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_007.yml::user transfers money mentioning two slots upfront 007","user_uttered":"I have to send 40 bucks to Ty.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have to send 40 bucks to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have to send 40 bucks to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to send 40 bucks to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_007.yml::user transfers money mentioning two slots upfront 007","user_uttered":"Certainly.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to send 40 bucks to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to transfer $40 to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to transfer $40 to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_008.yml::user transfers money mentioning two slots upfront 008","user_uttered":"I wish to transfer $40 to Ty.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to transfer $40 to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to transfer $40 to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to transfer $40 to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Yeah.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yeah.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_008.yml::user transfers money mentioning two slots upfront 008","user_uttered":"Yeah.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to transfer $40 to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Yeah.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yeah.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm planning to send 40 bucks to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm planning to send 40 bucks to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_009.yml::user transfers money mentioning two slots upfront 009","user_uttered":"I'm planning to send 40 bucks to Ty.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm planning to send 40 bucks to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm planning to send 40 bucks to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm planning to send 40 bucks to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Yep.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yep.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_009.yml::user transfers money mentioning two slots upfront 009","user_uttered":"Yep.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm planning to send 40 bucks to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Yep.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yep.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I intend to transfer 40 dollars to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I intend to transfer 40 dollars to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_010.yml::user transfers money mentioning two slots upfront 010","user_uttered":"I intend to transfer 40 dollars to Ty.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I intend to transfer 40 dollars to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I intend to transfer 40 dollars to Ty.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to transfer 40 dollars to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Affirmative.'\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Affirmative.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user transfers money mentioning two slots upfront ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_transfers_money_mentioning_two_slots_upfront_010.yml::user transfers money mentioning two slots upfront 010","user_uttered":"Affirmative.'","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to transfer 40 dollars to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: Affirmative.'\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Affirmative.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Send money to John\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_000.yml::user tries to skip a question and then cancels the flow (easy) 000","user_uttered":"Send money to John","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Send money to John\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Skip this question\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Skip this question\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_000.yml::user tries to skip a question and then cancels the flow (easy) 000","user_uttered":"Skip this question","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Skip this question\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Skip this question\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Skip this question\nAI: I want to help you the best I can, so it's important that we finish this step together. Your input is necessary for us to continue smoothly!\nAI: How much money do you want to transfer?\nUSER: Cancel\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Cancel\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_000.yml::user tries to skip a question and then cancels the flow (easy) 000","user_uttered":"Cancel","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Skip this question\nAI: I want to help you the best I can, so it's important that we finish this step together. Your input is necessary for us to continue smoothly!\nAI: How much money do you want to transfer?\nUSER: Cancel\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Cancel\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to transfer money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to transfer money to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_001.yml::user tries to skip a question and then cancels the flow (easy) 001","user_uttered":"I want to transfer money to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to transfer money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to transfer money to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money to John.\nAI: How much money do you want to transfer?\nUSER: I'd like to bypass this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to bypass this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_001.yml::user tries to skip a question and then cancels the flow (easy) 001","user_uttered":"I'd like to bypass this question.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money to John.\nAI: How much money do you want to transfer?\nUSER: I'd like to bypass this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to bypass this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money to John.\nAI: How much money do you want to transfer?\nUSER: I'd like to bypass this question.\nAI: I understand you want to skip this question. But to help you better, I need your input. Let's work together to make this process smooth for you!\nAI: How much money do you want to transfer?\nUSER: I'd like to stop.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to stop.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_001.yml::user tries to skip a question and then cancels the flow (easy) 001","user_uttered":"I'd like to stop.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money to John.\nAI: How much money do you want to transfer?\nUSER: I'd like to bypass this question.\nAI: I understand you want to skip this question. But to help you better, I need your input. Let's work together to make this process smooth for you!\nAI: How much money do you want to transfer?\nUSER: I'd like to stop.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to stop.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you help me send some cash to John?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you help me send some cash to John?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_002.yml::user tries to skip a question and then cancels the flow (easy) 002","user_uttered":"Could you help me send some cash to John?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you help me send some cash to John?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you help me send some cash to John?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you help me send some cash to John?\nAI: How much money do you want to transfer?\nUSER: Can we move past this question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can we move past this question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_002.yml::user tries to skip a question and then cancels the flow (easy) 002","user_uttered":"Can we move past this question?","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you help me send some cash to John?\nAI: How much money do you want to transfer?\nUSER: Can we move past this question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can we move past this question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you help me send some cash to John?\nAI: How much money do you want to transfer?\nUSER: Can we move past this question?\nAI: I'm here to help you, but I need to know the amount you want to transfer in order to assist you effectively. Your input is important for a smooth process!\nAI: How much money do you want to transfer?\nUSER: I want to terminate this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to terminate this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_002.yml::user tries to skip a question and then cancels the flow (easy) 002","user_uttered":"I want to terminate this.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you help me send some cash to John?\nAI: How much money do you want to transfer?\nUSER: Can we move past this question?\nAI: I'm here to help you, but I need to know the amount you want to transfer in order to assist you effectively. Your input is important for a smooth process!\nAI: How much money do you want to transfer?\nUSER: I want to terminate this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to terminate this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to make a payment to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to make a payment to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_003.yml::user tries to skip a question and then cancels the flow (easy) 003","user_uttered":"I need to make a payment to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to make a payment to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to make a payment to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I prefer not to answer this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I prefer not to answer this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_003.yml::user tries to skip a question and then cancels the flow (easy) 003","user_uttered":"I prefer not to answer this question.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I prefer not to answer this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I prefer not to answer this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I prefer not to answer this question.\nAI: I understand you may not want to share the amount, but I need your input to help you make the payment smoothly. Let's work together to complete this step.\nAI: How much money do you want to transfer?\nUSER: I wish to abort this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to abort this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_003.yml::user tries to skip a question and then cancels the flow (easy) 003","user_uttered":"I wish to abort this.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I prefer not to answer this question.\nAI: I understand you may not want to share the amount, but I need your input to help you make the payment smoothly. Let's work together to complete this step.\nAI: How much money do you want to transfer?\nUSER: I wish to abort this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to abort this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: John should be the recipient of my money transfer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"John should be the recipient of my money transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_004.yml::user tries to skip a question and then cancels the flow (easy) 004","user_uttered":"John should be the recipient of my money transfer.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: John should be the recipient of my money transfer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"John should be the recipient of my money transfer.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: John should be the recipient of my money transfer.\nAI: How much money do you want to transfer?\nUSER: Can we proceed without answering this question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can we proceed without answering this question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_004.yml::user tries to skip a question and then cancels the flow (easy) 004","user_uttered":"Can we proceed without answering this question?","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: John should be the recipient of my money transfer.\nAI: How much money do you want to transfer?\nUSER: Can we proceed without answering this question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can we proceed without answering this question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: John should be the recipient of my money transfer.\nAI: How much money do you want to transfer?\nUSER: Can we proceed without answering this question?\nAI: I'm here to help you, but I need your input to make sure everything goes smoothly. Let's work together to complete this step.\nAI: How much money do you want to transfer?\nUSER: I want to discontinue this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to discontinue this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_004.yml::user tries to skip a question and then cancels the flow (easy) 004","user_uttered":"I want to discontinue this.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: John should be the recipient of my money transfer.\nAI: How much money do you want to transfer?\nUSER: Can we proceed without answering this question?\nAI: I'm here to help you, but I need your input to make sure everything goes smoothly. Let's work together to complete this step.\nAI: How much money do you want to transfer?\nUSER: I want to discontinue this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to discontinue this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to send a payment to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to send a payment to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_005.yml::user tries to skip a question and then cancels the flow (easy) 005","user_uttered":"I'm looking to send a payment to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to send a payment to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to send a payment to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to send a payment to John.\nAI: How much money do you want to transfer?\nUSER: I wish to avoid this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to avoid this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_005.yml::user tries to skip a question and then cancels the flow (easy) 005","user_uttered":"I wish to avoid this question.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to send a payment to John.\nAI: How much money do you want to transfer?\nUSER: I wish to avoid this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to avoid this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to send a payment to John.\nAI: How much money do you want to transfer?\nUSER: I wish to avoid this question.\nAI: I understand you may not want to share that information, but it would be helpful for me to assist you better if you could provide it. Your input is important for a smooth process!\nAI: How much money do you want to transfer?\nUSER: I wish to cease this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to cease this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_005.yml::user tries to skip a question and then cancels the flow (easy) 005","user_uttered":"I wish to cease this.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to send a payment to John.\nAI: How much money do you want to transfer?\nUSER: I wish to avoid this question.\nAI: I understand you may not want to share that information, but it would be helpful for me to assist you better if you could provide it. Your input is important for a smooth process!\nAI: How much money do you want to transfer?\nUSER: I wish to cease this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to cease this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to dispatch some funds to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to dispatch some funds to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_006.yml::user tries to skip a question and then cancels the flow (easy) 006","user_uttered":"I wish to dispatch some funds to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to dispatch some funds to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to dispatch some funds to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to dispatch some funds to John.\nAI: How much money do you want to transfer?\nUSER: I'd like to omit this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to omit this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_006.yml::user tries to skip a question and then cancels the flow (easy) 006","user_uttered":"I'd like to omit this question.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to dispatch some funds to John.\nAI: How much money do you want to transfer?\nUSER: I'd like to omit this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to omit this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to dispatch some funds to John.\nAI: How much money do you want to transfer?\nUSER: I'd like to omit this question.\nAI: I understand that you want to skip this question. But it's important for us to complete this step together so I can help you effectively. Your input is necessary for a smooth experience!\nAI: How much money do you want to transfer?\nUSER: I'd like to end this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to end this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_006.yml::user tries to skip a question and then cancels the flow (easy) 006","user_uttered":"I'd like to end this.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to dispatch some funds to John.\nAI: How much money do you want to transfer?\nUSER: I'd like to omit this question.\nAI: I understand that you want to skip this question. But it's important for us to complete this step together so I can help you effectively. Your input is necessary for a smooth experience!\nAI: How much money do you want to transfer?\nUSER: I'd like to end this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to end this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have to remit some money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have to remit some money to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_007.yml::user tries to skip a question and then cancels the flow (easy) 007","user_uttered":"I have to remit some money to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have to remit some money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have to remit some money to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to remit some money to John.\nAI: How much money do you want to transfer?\nUSER: Can we skip over this question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can we skip over this question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_007.yml::user tries to skip a question and then cancels the flow (easy) 007","user_uttered":"Can we skip over this question?","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to remit some money to John.\nAI: How much money do you want to transfer?\nUSER: Can we skip over this question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can we skip over this question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to remit some money to John.\nAI: How much money do you want to transfer?\nUSER: Can we skip over this question?\nAI: I want to help you the best I can, so it's important that we finish this step together. Your input is necessary for everything to go smoothly!\nAI: How much money do you want to transfer?\nUSER: I want to break off this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to break off this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_007.yml::user tries to skip a question and then cancels the flow (easy) 007","user_uttered":"I want to break off this.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I have to remit some money to John.\nAI: How much money do you want to transfer?\nUSER: Can we skip over this question?\nAI: I want to help you the best I can, so it's important that we finish this step together. Your input is necessary for everything to go smoothly!\nAI: How much money do you want to transfer?\nUSER: I want to break off this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to break off this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in sending a money order to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in sending a money order to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_008.yml::user tries to skip a question and then cancels the flow (easy) 008","user_uttered":"I'm interested in sending a money order to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in sending a money order to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in sending a money order to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in sending a money order to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather sidestep this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd rather sidestep this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_008.yml::user tries to skip a question and then cancels the flow (easy) 008","user_uttered":"I'd rather sidestep this question.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in sending a money order to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather sidestep this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd rather sidestep this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in sending a money order to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather sidestep this question.\nAI: I understand if you prefer not to share that information. Let's work together to make sure everything goes smoothly. Your input is important for a good experience!\nAI: How much money do you want to transfer?\nUSER: I wish to call off this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to call off this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_008.yml::user tries to skip a question and then cancels the flow (easy) 008","user_uttered":"I wish to call off this.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in sending a money order to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather sidestep this question.\nAI: I understand if you prefer not to share that information. Let's work together to make sure everything goes smoothly. Your input is important for a good experience!\nAI: How much money do you want to transfer?\nUSER: I wish to call off this.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to call off this.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to dispatch a payment to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to dispatch a payment to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_009.yml::user tries to skip a question and then cancels the flow (easy) 009","user_uttered":"I want to dispatch a payment to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhotel_search: search for hotels\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to dispatch a payment to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to dispatch a payment to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to dispatch a payment to John.\nAI: How much money do you want to transfer?\nUSER: I want to leapfrog this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to leapfrog this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_009.yml::user tries to skip a question and then cancels the flow (easy) 009","user_uttered":"I want to leapfrog this question.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to dispatch a payment to John.\nAI: How much money do you want to transfer?\nUSER: I want to leapfrog this question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to leapfrog this question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to dispatch a payment to John.\nAI: How much money do you want to transfer?\nUSER: I want to leapfrog this question.\nAI: I understand you want to skip this question, but it's important for us to complete this step together. Your input is necessary for a smooth experience!\nAI: How much money do you want to transfer?\nUSER: I'd like to suspend this.'\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to suspend this.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"CancelFlow()","test_name":"user tries to skip a question and then cancels the flow (easy) ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_and_then_cancels_the_flow_(easy)_009.yml::user tries to skip a question and then cancels the flow (easy) 009","user_uttered":"I'd like to suspend this.'","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to dispatch a payment to John.\nAI: How much money do you want to transfer?\nUSER: I want to leapfrog this question.\nAI: I understand you want to skip this question, but it's important for us to complete this step together. Your input is necessary for a smooth experience!\nAI: How much money do you want to transfer?\nUSER: I'd like to suspend this.'\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to suspend this.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"CancelFlow()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Send money to John\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_000.yml::user tries to skip a question once (medium) 000","user_uttered":"Send money to John","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Send money to John\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Ask me something else\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_000.yml::user tries to skip a question once (medium) 000","user_uttered":"Ask me something else","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Ask me something else\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Ask me something else\nAI: I'm here to help you out, so please let me know what you'd like to do next. Your input is important for us to move forward smoothly!\nAI: How much money do you want to transfer?\nUSER: Okay 50\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_amount_of_money, 50)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_000.yml::user tries to skip a question once (medium) 000","user_uttered":"Okay 50","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Ask me something else\nAI: I'm here to help you out, so please let me know what you'd like to do next. Your input is important for us to move forward smoothly!\nAI: How much money do you want to transfer?\nUSER: Okay 50\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_amount_of_money, 50)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Ask me something else\nAI: I'm here to help you out, so please let me know what you'd like to do next. Your input is important for us to move forward smoothly!\nAI: How much money do you want to transfer?\nUSER: Okay 50\nAI: Would you like to transfer 50 to John?\nUSER: Yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_000.yml::user tries to skip a question once (medium) 000","user_uttered":"Yes","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send money to John\nAI: How much money do you want to transfer?\nUSER: Ask me something else\nAI: I'm here to help you out, so please let me know what you'd like to do next. Your input is important for us to move forward smoothly!\nAI: How much money do you want to transfer?\nUSER: Okay 50\nAI: Would you like to transfer 50 to John?\nUSER: Yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to make a payment to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to make a payment to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_001.yml::user tries to skip a question once (medium) 001","user_uttered":"I want to make a payment to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to make a payment to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to make a payment to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd prefer a different question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_001.yml::user tries to skip a question once (medium) 001","user_uttered":"I'd prefer a different question.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd prefer a different question.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\nAI: I understand you'd like to choose a different question. Let's work together to make this process smooth and easy for you!\nAI: How much money do you want to transfer?\nUSER: Fine, transfer 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Fine, transfer 50.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_amount_of_money, 50)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_001.yml::user tries to skip a question once (medium) 001","user_uttered":"Fine, transfer 50.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\nAI: I understand you'd like to choose a different question. Let's work together to make this process smooth and easy for you!\nAI: How much money do you want to transfer?\nUSER: Fine, transfer 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Fine, transfer 50.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_amount_of_money, 50)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\nAI: I understand you'd like to choose a different question. Let's work together to make this process smooth and easy for you!\nAI: How much money do you want to transfer?\nUSER: Fine, transfer 50.\nAI: Would you like to transfer 50 to John?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_001.yml::user tries to skip a question once (medium) 001","user_uttered":"Definitely.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to John.\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\nAI: I understand you'd like to choose a different question. Let's work together to make this process smooth and easy for you!\nAI: How much money do you want to transfer?\nUSER: Fine, transfer 50.\nAI: Would you like to transfer 50 to John?\nUSER: Definitely.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Definitely.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to wire some money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to wire some money to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_002.yml::user tries to skip a question once (medium) 002","user_uttered":"I'd like to wire some money to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to wire some money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to wire some money to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to wire some money to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather you ask me something else.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd rather you ask me something else.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_002.yml::user tries to skip a question once (medium) 002","user_uttered":"I'd rather you ask me something else.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to wire some money to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather you ask me something else.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd rather you ask me something else.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to wire some money to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather you ask me something else.\nAI: Sure, I understand. Let's move on to something else instead. Your input is important for us to continue smoothly.\nAI: How much money do you want to transfer?\nUSER: Sure, the amount is 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure, the amount is 50.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_amount_of_money, 50)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_002.yml::user tries to skip a question once (medium) 002","user_uttered":"Sure, the amount is 50.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nhotel_search: search for hotels\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to wire some money to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather you ask me something else.\nAI: Sure, I understand. Let's move on to something else instead. Your input is important for us to continue smoothly.\nAI: How much money do you want to transfer?\nUSER: Sure, the amount is 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure, the amount is 50.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_amount_of_money, 50)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to wire some money to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather you ask me something else.\nAI: Sure, I understand. Let's move on to something else instead. Your input is important for us to continue smoothly.\nAI: How much money do you want to transfer?\nUSER: Sure, the amount is 50.\nAI: Would you like to transfer 50 to John?\nUSER: Yes, indeed.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_002.yml::user tries to skip a question once (medium) 002","user_uttered":"Yes, indeed.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to wire some money to John.\nAI: How much money do you want to transfer?\nUSER: I'd rather you ask me something else.\nAI: Sure, I understand. Let's move on to something else instead. Your input is important for us to continue smoothly.\nAI: How much money do you want to transfer?\nUSER: Sure, the amount is 50.\nAI: Would you like to transfer 50 to John?\nUSER: Yes, indeed.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Yes, indeed.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to remit money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to remit money to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_003.yml::user tries to skip a question once (medium) 003","user_uttered":"I wish to remit money to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to remit money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to remit money to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit money to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you ask me a different question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_003.yml::user tries to skip a question once (medium) 003","user_uttered":"Can you ask me a different question?","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit money to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Can you ask me a different question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit money to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\nAI: Of course! Let's try another question to make this process easier for you. Your input is important for us to proceed smoothly.\nAI: How much money do you want to transfer?\nUSER: Okay, the figure is 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Okay, the figure is 50.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_amount_of_money, 50)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_003.yml::user tries to skip a question once (medium) 003","user_uttered":"Okay, the figure is 50.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit money to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\nAI: Of course! Let's try another question to make this process easier for you. Your input is important for us to proceed smoothly.\nAI: How much money do you want to transfer?\nUSER: Okay, the figure is 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Okay, the figure is 50.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_amount_of_money, 50)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit money to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\nAI: Of course! Let's try another question to make this process easier for you. Your input is important for us to proceed smoothly.\nAI: How much money do you want to transfer?\nUSER: Okay, the figure is 50.\nAI: Would you like to transfer 50 to John?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_003.yml::user tries to skip a question once (medium) 003","user_uttered":"Certainly.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance.\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to remit money to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\nAI: Of course! Let's try another question to make this process easier for you. Your input is important for us to proceed smoothly.\nAI: How much money do you want to transfer?\nUSER: Okay, the figure is 50.\nAI: Would you like to transfer 50 to John?\nUSER: Certainly.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Certainly.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to remit some funds to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to remit some funds to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_004.yml::user tries to skip a question once (medium) 004","user_uttered":"I need to remit some funds to John.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nhotel_search: search for hotels\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to remit some funds to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to remit some funds to John.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to remit some funds to John.\nAI: How much money do you want to transfer?\nUSER: Could you pose a different question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you pose a different question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SkipQuestion()","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_004.yml::user tries to skip a question once (medium) 004","user_uttered":"Could you pose a different question?","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to remit some funds to John.\nAI: How much money do you want to transfer?\nUSER: Could you pose a different question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could you pose a different question?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SkipQuestion()"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to remit some funds to John.\nAI: How much money do you want to transfer?\nUSER: Could you pose a different question?\nAI: I'm here to help you out, so let's work together to make this process smooth. Your input is important for us to move forward!\nAI: How much money do you want to transfer?\nUSER: Sure, the number is 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure, the number is 50.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_amount_of_money, 50)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_004.yml::user tries to skip a question once (medium) 004","user_uttered":"Sure, the number is 50.","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to remit some funds to John.\nAI: How much money do you want to transfer?\nUSER: Could you pose a different question?\nAI: I'm here to help you out, so let's work together to make this process smooth. Your input is important for us to move forward!\nAI: How much money do you want to transfer?\nUSER: Sure, the number is 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Sure, the number is 50.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_amount_of_money, 50)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to remit some funds to John.\nAI: How much money do you want to transfer?\nUSER: Could you pose a different question?\nAI: I'm here to help you out, so let's work together to make this process smooth. Your input is important for us to move forward!\nAI: How much money do you want to transfer?\nUSER: Sure, the number is 50.\nAI: Would you like to transfer 50 to John?\nUSER: Positively.'\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Positively.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(transfer_money_final_confirmation, True)","test_name":"user tries to skip a question once (medium) ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_tries_to_skip_a_question_once_(medium)_004.yml::user tries to skip a question once (medium) 004","user_uttered":"Positively.'","current_flow":"transfer_money","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nhealth_advice: user asks for health advice\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to remit some funds to John.\nAI: How much money do you want to transfer?\nUSER: Could you pose a different question?\nAI: I'm here to help you out, so let's work together to make this process smooth. Your input is important for us to move forward!\nAI: How much money do you want to transfer?\nUSER: Sure, the number is 50.\nAI: Would you like to transfer 50 to John?\nUSER: Positively.'\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Positively.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(transfer_money_final_confirmation, True)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to set up a new recurrent payment\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new recurrent payment\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_000.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 000","user_uttered":"I want to set up a new recurrent payment","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to set up a new recurrent payment\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new recurrent payment\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to set up a new recurrent payment\nAI: What type of payment would you like to set up?\nUSER: d debit\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"d debit\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_000.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 000","user_uttered":"d debit","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: The user needs to replace their card.\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to set up a new recurrent payment\nAI: What type of payment would you like to set up?\nUSER: d debit\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"d debit\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to initiate a new recurring payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to initiate a new recurring payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_001.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 001","user_uttered":"I'd like to initiate a new recurring payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to initiate a new recurring payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to initiate a new recurring payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to initiate a new recurring payment.\nAI: What type of payment would you like to set up?\nUSER: direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_001.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 001","user_uttered":"direct debit.","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to initiate a new recurring payment.\nAI: What type of payment would you like to set up?\nUSER: direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in establishing a new periodic payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in establishing a new periodic payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_002.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 002","user_uttered":"I'm interested in establishing a new periodic payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in establishing a new periodic payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in establishing a new periodic payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in establishing a new periodic payment.\nAI: What type of payment would you like to set up?\nUSER: It's a direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's a direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_002.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 002","user_uttered":"It's a direct debit.","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm interested in establishing a new periodic payment.\nAI: What type of payment would you like to set up?\nUSER: It's a direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's a direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to arrange for a new regular payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to arrange for a new regular payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_003.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 003","user_uttered":"I need to arrange for a new regular payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to arrange for a new regular payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to arrange for a new regular payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to arrange for a new regular payment.\nAI: What type of payment would you like to set up?\nUSER: I'm referring to direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm referring to direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_003.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 003","user_uttered":"I'm referring to direct debit.","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to arrange for a new regular payment.\nAI: What type of payment would you like to set up?\nUSER: I'm referring to direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm referring to direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I start a new consistent payment?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I start a new consistent payment?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_004.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 004","user_uttered":"Could I start a new consistent payment?","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could I start a new consistent payment?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Could I start a new consistent payment?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I start a new consistent payment?\nAI: What type of payment would you like to set up?\nUSER: I mean direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I mean direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_004.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 004","user_uttered":"I mean direct debit.","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could I start a new consistent payment?\nAI: What type of payment would you like to set up?\nUSER: I mean direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I mean direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to create a new ongoing payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to create a new ongoing payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_005.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 005","user_uttered":"I'm looking to create a new ongoing payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to create a new ongoing payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to create a new ongoing payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to create a new ongoing payment.\nAI: What type of payment would you like to set up?\nUSER: I'm talking about direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm talking about direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_005.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 005","user_uttered":"I'm talking about direct debit.","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm looking to create a new ongoing payment.\nAI: What type of payment would you like to set up?\nUSER: I'm talking about direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm talking about direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to set up a new routine payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to set up a new routine payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_006.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 006","user_uttered":"I wish to set up a new routine payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to set up a new routine payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to set up a new routine payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to set up a new routine payment.\nAI: What type of payment would you like to set up?\nUSER: I'm thinking of direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm thinking of direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_006.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 006","user_uttered":"I'm thinking of direct debit.","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to set up a new routine payment.\nAI: What type of payment would you like to set up?\nUSER: I'm thinking of direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm thinking of direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm keen on setting up a new systematic payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm keen on setting up a new systematic payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_007.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 007","user_uttered":"I'm keen on setting up a new systematic payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm keen on setting up a new systematic payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm keen on setting up a new systematic payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on setting up a new systematic payment.\nAI: What type of payment would you like to set up?\nUSER: I'm considering direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm considering direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_007.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 007","user_uttered":"I'm considering direct debit.","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm keen on setting up a new systematic payment.\nAI: What type of payment would you like to set up?\nUSER: I'm considering direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm considering direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I desire to establish a new regular payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I desire to establish a new regular payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_008.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 008","user_uttered":"I desire to establish a new regular payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I desire to establish a new regular payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I desire to establish a new regular payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I desire to establish a new regular payment.\nAI: What type of payment would you like to set up?\nUSER: I'm implying direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm implying direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_008.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 008","user_uttered":"I'm implying direct debit.","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I desire to establish a new regular payment.\nAI: What type of payment would you like to set up?\nUSER: I'm implying direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm implying direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I intend to initiate a new recurring payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I intend to initiate a new recurring payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_009.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 009","user_uttered":"I intend to initiate a new recurring payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \ntransaction_search: lists the last transactions of the user account\n    \nhealth_advice: user asks for health advice\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I intend to initiate a new recurring payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I intend to initiate a new recurring payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to initiate a new recurring payment.\nAI: What type of payment would you like to set up?\nUSER: I'm hinting at direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm hinting at direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_009.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 009","user_uttered":"I'm hinting at direct debit.","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to initiate a new recurring payment.\nAI: What type of payment would you like to set up?\nUSER: I'm hinting at direct debit.\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm hinting at direct debit.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm planning to set up a new constant payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm planning to set up a new constant payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_010.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 010","user_uttered":"I'm planning to set up a new constant payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm planning to set up a new constant payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm planning to set up a new constant payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm planning to set up a new constant payment.\nAI: What type of payment would you like to set up?\nUSER: I'm suggesting direct debit.'\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm suggesting direct debit.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"SetSlot(recurrent_payment_type, direct debit)","test_name":"user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_but_specifies_the_type_incompletely,_example_2_010.yml::user wants to set up a new recurrent payment, but specifies the type incompletely, example 2 010","user_uttered":"I'm suggesting direct debit.'","current_flow":"setup_recurrent_payment","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nreplace_card: The user needs to replace their card.\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'm planning to set up a new constant payment.\nAI: What type of payment would you like to set up?\nUSER: I'm suggesting direct debit.'\n\n===\n\nYou are currently in the flow \"setup_recurrent_payment\".\nYou have just asked the user for the slot \"recurrent_payment_type\" (the type of payment).\n\n\nHere are the slots of the currently active flow:\n- name: recurrent_payment_type, value: undefined, type: categorical, description: the type of payment, allowed values: ['direct debit', 'standing order']\n- name: recurrent_payment_recipient, value: undefined, type: text, description: the name of a person\n- name: recurrent_payment_amount_of_money, value: undefined, type: float, description: the amount of money without any currency designation\n- name: recurrent_payment_frequency, value: undefined, type: categorical, description: the frequency of the payment, allowed values: ['monthly', 'yearly']\n- name: recurrent_payment_start_date, value: undefined, type: any, description: the start date of the payment\n- name: recurrent_payment_end_date, value: undefined, type: any, description: the end date of the payment\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm suggesting direct debit.'\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"SetSlot(recurrent_payment_type, direct debit)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to set up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":0,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_000.yml::user wants to set up a new recurrent payment, stating first which type of payment 000","user_uttered":"I want to set up a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to set up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to establish a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to establish a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":1,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_001.yml::user wants to set up a new recurrent payment, stating first which type of payment 001","user_uttered":"I'm looking to establish a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm looking to establish a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm looking to establish a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to arrange a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to arrange a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":2,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_002.yml::user wants to set up a new recurrent payment, stating first which type of payment 002","user_uttered":"I need to arrange a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to arrange a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I need to arrange a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to initiate a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to initiate a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":3,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_003.yml::user wants to set up a new recurrent payment, stating first which type of payment 003","user_uttered":"I'd like to initiate a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ncheck_balance: check the user's account balance.\n    \nadd_card: add a card to your account\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to initiate a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'd like to initiate a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in creating a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in creating a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":4,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_004.yml::user wants to set up a new recurrent payment, stating first which type of payment 004","user_uttered":"I'm interested in creating a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm interested in creating a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm interested in creating a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have to set up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":5,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_005.yml::user wants to set up a new recurrent payment, stating first which type of payment 005","user_uttered":"I have to set up a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I have to set up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I have to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to put in place a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to put in place a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":6,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_006.yml::user wants to set up a new recurrent payment, stating first which type of payment 006","user_uttered":"I wish to put in place a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to put in place a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I wish to put in place a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm considering setting up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm considering setting up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":7,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_007.yml::user wants to set up a new recurrent payment, stating first which type of payment 007","user_uttered":"I'm considering setting up a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm considering setting up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm considering setting up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm in the process of setting up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm in the process of setting up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":8,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_008.yml::user wants to set up a new recurrent payment, stating first which type of payment 008","user_uttered":"I'm in the process of setting up a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm in the process of setting up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm in the process of setting up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm planning to set up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm planning to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":9,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_009.yml::user wants to set up a new recurrent payment, stating first which type of payment 009","user_uttered":"I'm planning to set up a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nhealth_advice: user asks for health advice\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nhotel_search: search for hotels\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm planning to set up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm planning to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"instruction":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm on the verge of setting up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm on the verge of setting up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:","output":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)","test_name":"user wants to set up a new recurrent payment, stating first which type of payment ","paraphrasing_id":10,"test_full_name":"finetuning\/1_paraphasing\/user_wants_to_set_up_a_new_recurrent_payment,_stating_first_which_type_of_payment_010.yml::user wants to set up a new recurrent payment, stating first which type of payment 010","user_uttered":"I'm on the verge of setting up a new standing order payment.","current_flow":"No flow.","conversation":[{"from":"human","value":"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance.\n    \nhealth_advice: user asks for health advice\n    \nsetup_recurrent_payment: This flow let users to set up a recurring payment, which can either be a direct debit or a standing order.\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nhotel_search: search for hotels\n    \ntransfer_money: This flow let's users send money to friends and family.\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: The user needs to replace their card.\n    \nbook_restaurant: This flow books a restaurant\n    slot: book_restaurant_name_of_restaurant\n    slot: book_restaurant_number_of_people\n    slot: book_restaurant_date\n    slot: book_restaurant_time\n    slot: book_restaurant_is_date_flexible ((True\/False) whether offering alternative dates make sense), allowed values: [True, False]\n    slot: book_restaurant_alternative_dummy (do not fill this slot, instead fill the given parts of the alternative into their respective slots)\n    \nreplace_eligible_card: Never predict StartFlow for this flow, users are not able to trigger it themselves.\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'm on the verge of setting up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I'm on the verge of setting up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"},{"from":"gpt","value":"StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
